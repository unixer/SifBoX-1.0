--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp	2013-12-18 22:15:34.000000000 +0100
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecIMX.cpp	2014-01-02 18:15:03.881318831 +0100
@@ -1117,16 +1117,6 @@
 
     do // Decode as long as the VPU consumes data
     {
-      if (m_decOpenParam.CodecFormat == VPU_V_MPEG2)
-      {
-        parse_mpeg2_aspect_ratio(inData.pVirAddr, inData.nSize);
-      }
-      else
-      {
-        m_display_width = m_initInfo.PicCropRect.nRight - m_initInfo.PicCropRect.nLeft;
-        m_display_height = m_initInfo.PicCropRect.nBottom - m_initInfo.PicCropRect.nTop;
-      }
-
       retry = false;
       ret = VPU_DecDecodeBuf(m_vpuHandle, &inData, &decRet);
       if (ret != VPU_DEC_RET_SUCCESS)
@@ -1359,8 +1349,8 @@
   pDvdVideoPicture->dts = DVD_NOPTS_VALUE;
   pDvdVideoPicture->iWidth = m_initInfo.PicCropRect.nRight - m_initInfo.PicCropRect.nLeft;
   pDvdVideoPicture->iHeight = m_initInfo.PicCropRect.nBottom - m_initInfo.PicCropRect.nTop;
-  pDvdVideoPicture->iDisplayWidth = m_display_width;
-  pDvdVideoPicture->iDisplayHeight =  m_display_height;
+  pDvdVideoPicture->iDisplayWidth = m_initInfo.PicCropRect.nRight - m_initInfo.PicCropRect.nLeft;
+  pDvdVideoPicture->iDisplayHeight = m_initInfo.PicCropRect.nBottom - m_initInfo.PicCropRect.nTop;
   pDvdVideoPicture->format = RENDER_FMT_IMX;
   pDvdVideoPicture->imx = this;
   return true;
@@ -1542,65 +1532,3 @@
     (*poutbuf + offset + sps_pps_size)[2] = 1;
   }
 }
-
-
-static inline unsigned char *Seek4bytesCode(unsigned char *pData, int len, unsigned int n4byteCode)
-{
-  if(len >= 4)
-  {
-    unsigned int code = (pData[0]<<16) | (pData[1]<<8) | (pData[2]);
-    len -= 3;
-    pData += 3;
-    while(len > 0)
-    {
-      code = (code<<8) | *pData++ ;
-      len--;
-      if(code == n4byteCode)
-      {
-        return pData-4;
-      }
-    }
-  }
-  return NULL;
-}
-
-uint8_t *CDVDVideoCodecIMX::parse_mpeg2_aspect_ratio(uint8_t *pData, int iSize)
-{
-  uint8_t *pSeqHead = Seek4bytesCode(pData, iSize, 0x000001b3);
-
-  if (pSeqHead)
-  {
-    iSize -= pSeqHead - pData;
-
-    if (iSize >= 12)
-    {
-      int width, height, aspect_ratio_code;
-
-      width  = (pSeqHead[4] << 4) | (pSeqHead[5] >> 4);
-      height = ((pSeqHead[5] & 0x0f) << 8) | pSeqHead[6];
-      aspect_ratio_code = pSeqHead[7] >> 4;
-
-      switch (aspect_ratio_code)
-      {
-      case 2:                   // IAR 4:3
-          m_display_width = (height * 4) / 3;
-          break;
-      case 3:                   // IAR 16:9
-          m_display_width = (height * 16) / 9;
-          break;
-      case 4:                   // IAR 2.21:1
-          m_display_width = (height * 221) / 100;
-          break;
-      default:                  // PAR 1:1
-          m_display_width = width;
-      }
-
-      m_display_height = height;
-
-      return pSeqHead;
-    }
-  }
-
-  return 0;
-}
-
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecIMX.h	2013-12-18 22:15:34.000000000 +0100
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/DVDVideoCodecIMX.h	2014-01-02 18:15:03.881318831 +0100
@@ -141,8 +141,4 @@
   uint32_t          m_sps_pps_size;
   omx_bitstream_ctx m_sps_pps_context; 
   bool m_convert_bitstream;
-
-  uint8_t *parse_mpeg2_aspect_ratio(uint8_t *pData, int iSize);
-  int m_display_width;
-  int m_display_height;
 };
