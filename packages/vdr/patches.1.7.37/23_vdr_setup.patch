diff -Naur vdr-1.7.37.orig/menu.c vdr-1.7.37/menu.c
--- vdr-1.7.37.orig/menu.c	2013-01-26 15:55:49.000000000 +0100
+++ vdr-1.7.37/menu.c	2013-01-26 16:42:49.000000000 +0100
@@ -3553,6 +3553,12 @@
 cMenuMain::cMenuMain(eOSState State)
 :cOsdMenu("")
 {
+ // Load Menu Configuration
+  cString menuXML = cString::sprintf("%s/setup/vdr-menu.%s.xml", cPlugin::ConfigDirectory(), Setup.OSDLanguage);
+  if (access(menuXML, 04) == -1)
+     menuXML = cString::sprintf("%s/setup/vdr-menu.xml", cPlugin::ConfigDirectory());
+  subMenu.LoadXml(menuXML);
+  nrDynamicMenuEntries = 0;
   SetMenuCategory(mcMain);
   replaying = false;
   stopReplayItem = NULL;
@@ -3582,13 +3588,58 @@
   return o;
 }
 
-void cMenuMain::Set(void)
+void cMenuMain::Set(int current)
 {
   Clear();
   SetTitle("VDR");
   SetHasHotkeys();
 
-  // Basic menu items:
+  stopReplayItem = NULL;
+  cancelEditingItem = NULL;
+  stopRecordingItem = NULL;
+
+  // remember initial dynamic MenuEntries added
+  nrDynamicMenuEntries = Count();
+  for (cSubMenuNode *node = subMenu.GetMenuTree()->First(); node; node = subMenu.GetMenuTree()->Next(node)) {
+      cSubMenuNode::Type type = node->GetType();
+      if (type==cSubMenuNode::PLUGIN) {
+         const char *item = node->GetPluginMainMenuEntry();
+	 if (item)
+          Add(new cMenuPluginItem(hk(item), node->GetPluginIndex()));
+         }
+      else if (type==cSubMenuNode::MENU) {
+         cString item = cString::sprintf("%s%s", node->GetName(), *subMenu.GetMenuSuffix());
+	 Add(new cOsdItem(hk(item)));
+      }
+      else if ((type==cSubMenuNode::COMMAND) || (type==cSubMenuNode::THREAD)) {
+	 Add(new cOsdItem(hk(node->GetName())));
+       }
+      else if (type==cSubMenuNode::SYSTEM) {
+         const char *item = node->GetName();
+    if (strcmp(item, "Schedule") == 0)
+            Add(new cOsdItem(hk(tr("Schedule")), osSchedule));
+         else if (strcmp(item, "Channels") == 0)
+            Add(new cOsdItem(hk(tr("Channels")), osChannels));
+         else if (strcmp(item, "Timers") == 0)
+            Add(new cOsdItem(hk(tr("Timers")), osTimers));
+         else if (strcmp(item, "Recordings") == 0)
+            Add(new cOsdItem(hk(tr("Recordings")), osRecordings));
+         else if (strcmp(item, "Setup") == 0) {
+            cString itemSetup = cString::sprintf("%s%s", tr("Setup"), *subMenu.GetMenuSuffix());
+            Add(new cOsdItem(hk(itemSetup), osSetup));
+            }
+         else if (strcmp(item, "Commands") == 0 && Commands.Count() > 0) {
+            cString itemCommands = cString::sprintf("%s%s", tr("Commands"), *subMenu.GetMenuSuffix());
+            Add(new cOsdItem(hk(itemCommands), osCommands));
+            }
+         }
+     }
+  if (current >=0 && current<Count()) {
+     SetCurrent(Get(current));
+     }
+
+
+ // Basic menu items:
 
   Add(new cOsdItem(hk(tr("Schedule")),   osSchedule));
   Add(new cOsdItem(hk(tr("Channels")),   osChannels));
@@ -3623,6 +3674,17 @@
 {
   bool result = false;
 
+  cOsdItem *fMenu = NULL;
+  if (Force && subMenu.isTopMenu()) {
+     fMenu = First();
+     nrDynamicMenuEntries = 0;
+     }
+
+  if (!subMenu.isTopMenu()) {
+     SetTitle(cString::sprintf("%s  -  %s", tr("VDR"), subMenu.GetParentMenuTitel()));
+     result = true;
+     }
+
   bool NewReplaying = cControl::Control() != NULL;
   if (Force || NewReplaying != replaying) {
      replaying = NewReplaying;
@@ -3683,6 +3745,10 @@
      result = true;
      }
 
+  // adjust nrDynamicMenuEntries
+  if (fMenu != NULL)
+     nrDynamicMenuEntries = fMenu->Index();
+
   return result;
 }
 
@@ -3738,6 +3804,16 @@
                          state = osEnd;
                        }
                        break;
+    case osBack:       {
+                         int newCurrent = 0;
+                         if (subMenu.Up(&newCurrent)) {
+                            Set(newCurrent);
+                            return osContinue;
+                            }
+                         else
+                            return osEnd;
+                       }
+                       break;
     default: switch (Key) {
                case kRecord:
                case kRed:    if (!HadSubMenu)
@@ -3754,6 +3830,50 @@
                case kBlue:   if (!HadSubMenu)
                                 state = replaying ? osStopReplay : cReplayControl::LastReplayed() ? osReplay : osRecordings;
                              break;
+               case kOk:     if (state == osUnknown) {
+                                cString buffer;
+                                int index = Current()-nrDynamicMenuEntries;
+                                cSubMenuNode *node = subMenu.GetNode(index);
+
+                                if (node != NULL) {
+                                   if (node->GetType() == cSubMenuNode::MENU) {
+		       		      subMenu.Down(index);
+                                      }
+                                   else if (node->GetType() == cSubMenuNode::COMMAND) {
+                                      bool confirmed = true;
+                                      if (node->CommandConfirm()) {
+                                         buffer = cString::sprintf("%s?", node->GetName());
+                                         confirmed = Interface->Confirm(buffer);
+                                         }
+                                      if (confirmed) {
+                                         const char *Result = subMenu.ExecuteCommand(node->GetCommand());
+                                        if (Result)
+                                            return AddSubMenu(new cMenuText(node->GetName(), Result, fontFix));
+                                         return osEnd;
+                                         }
+                                     }
+                                   else if (node->GetType() == cSubMenuNode::THREAD) {
+                                     bool confirmed = true;
+                                      if (node->CommandConfirm()) {
+                                         buffer = cString::sprintf("%s?", node->GetName());
+                                         confirmed = Interface->Confirm(buffer);
+                                         }
+                                      if (confirmed) {
+                                         buffer = cString::sprintf("%s", node->GetCommand());
+                                         cExecCmdThread *execcmd = new cExecCmdThread(node->GetCommand());
+                                         if (execcmd->Start())
+                                            dsyslog("executing command '%s'", *buffer);
+                                        else
+                                            esyslog("ERROR: can't execute command '%s'", *buffer);
+                                         return osEnd;
+                                         }
+                                      }
+                                   }
+
+                                Set();
+                                return osContinue;
+                                }
+                             break;
                default:      break;
                }
     }
diff -Naur vdr-1.7.37.orig/menu.h vdr-1.7.37/menu.h
--- vdr-1.7.37.orig/menu.h	2013-01-26 15:55:49.000000000 +0100
+++ vdr-1.7.37/menu.h	2013-01-26 16:42:49.000000000 +0100
@@ -18,6 +18,7 @@
 #include "menuitems.h"
 #include "recorder.h"
 #include "skins.h"
+#include "submenu.h"
 
 class cMenuText : public cOsdMenu {
 private:
@@ -98,6 +99,7 @@
 
 class cMenuMain : public cOsdMenu {
 private:
+  int    nrDynamicMenuEntries;
   bool replaying;
   cOsdItem *stopReplayItem;
   cOsdItem *cancelEditingItem;
@@ -105,8 +107,9 @@
   cOsdItem *stopRecordingItem;
   int recordControlsState;
   static cOsdObject *pluginOsdObject;
-  void Set(void);
+  void Set(int current=0);
   bool Update(bool Force = false);
+  cSubMenu subMenu;
 public:
   cMenuMain(eOSState State = osUnknown);
   virtual eOSState ProcessKey(eKeys Key);
diff -Naur vdr-1.7.37.orig/osdbase.c vdr-1.7.37/osdbase.c
--- vdr-1.7.37.orig/osdbase.c	2013-01-26 15:55:49.000000000 +0100
+++ vdr-1.7.37/osdbase.c	2013-01-26 16:42:49.000000000 +0100
@@ -23,6 +23,7 @@
   state = State;
   selectable = true;
   fresh = true;
+  subMenu = 0;
 }
 
 cOsdItem::cOsdItem(const char *Text, eOSState State, bool Selectable)
@@ -31,9 +32,20 @@
   state = State;
   selectable = Selectable;
   fresh = true;
+  subMenu = 0;
   SetText(Text);
 }
 
+cOsdItem::cOsdItem(const char *Text, eOSState State, cSubMenuNode* SubMenu)
+{
+  text = NULL;
+  state = State;
+  selectable = true;
+  fresh = true;
+  SetText(Text);
+  subMenu = SubMenu;
+}
+
 cOsdItem::~cOsdItem()
 {
   free(text);
diff -Naur vdr-1.7.37.orig/osdbase.h vdr-1.7.37/osdbase.h
--- vdr-1.7.37.orig/osdbase.h	2013-01-26 15:55:49.000000000 +0100
+++ vdr-1.7.37/osdbase.h	2013-01-26 16:42:49.000000000 +0100
@@ -14,6 +14,7 @@
 #include "osd.h"
 #include "skins.h"
 #include "tools.h"
+#include "submenu.h"
 
 enum eOSState { osUnknown,
                 osContinue,
@@ -52,16 +53,20 @@
   char *text;
   eOSState state;
   bool selectable;
+  cSubMenuNode* subMenu;
 protected:
   bool fresh;
 public:
   cOsdItem(eOSState State = osUnknown);
   cOsdItem(const char *Text, eOSState State = osUnknown, bool Selectable = true);
+  cOsdItem(const char *Text, eOSState State, cSubMenuNode* SubMenu);
   virtual ~cOsdItem();
   bool Selectable(void) const { return selectable; }
   void SetText(const char *Text, bool Copy = true);
   void SetSelectable(bool Selectable);
   void SetFresh(bool Fresh);
+  void SetSubMenu(cSubMenuNode* SubMenu) { subMenu = SubMenu; }
+  cSubMenuNode* SubMenu() { return subMenu; }
   const char *Text(void) const { return text; }
   virtual void Set(void) {}
   virtual void SetMenuItem(cSkinDisplayMenu *DisplayMenu, int Index, bool Current, bool Selectable);
