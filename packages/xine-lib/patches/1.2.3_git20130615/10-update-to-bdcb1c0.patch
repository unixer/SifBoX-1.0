diff --git a/ChangeLog b/ChangeLog
index 2a5f427..6e746e9 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+xine-lib (1.2.5) 201?-??-??
+  * Add support for AC3 and EAC3 to the Quicktime demuxer.
+  * Recognise & use ADPCM G.726 and ATRAC3. (ffmpeg/libva)
+  * Some colour format conversion fixes.
+  * Fix RealVideo re-ordered PTS: pass through, let the decoder re-order it.
+  * Fix some problems with COOK audio.
+
 xine-lib (1.2.4) 2013-09-24
   * Some VAAPI plugin fixes (build, image size changes).
   * ffmpeg multi-channel playback fixes:
diff --git a/include/xine/buffer.h b/include/xine/buffer.h
index 99c4b05..d6aa708 100644
--- a/include/xine/buffer.h
+++ b/include/xine/buffer.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2012 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/include/xine/compat.h b/include/xine/compat.h
index 647d664..9dac091 100644
--- a/include/xine/compat.h
+++ b/include/xine/compat.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2009 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a unix video player.
  *
diff --git a/include/xine/post.h b/include/xine/post.h
index f889371..f7f83da 100644
--- a/include/xine/post.h
+++ b/include/xine/post.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2011 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/audio_dec/xine_a52_decoder.c b/src/audio_dec/xine_a52_decoder.c
index cf631f4..25e4efc 100644
--- a/src/audio_dec/xine_a52_decoder.c
+++ b/src/audio_dec/xine_a52_decoder.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2011 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/audio_dec/xine_musepack_decoder.c b/src/audio_dec/xine_musepack_decoder.c
index b47e8c2..4260faf 100644
--- a/src/audio_dec/xine_musepack_decoder.c
+++ b/src/audio_dec/xine_musepack_decoder.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2005-2012 the xine project
+ * Copyright (C) 2005-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/audio_out/audio_alsa_out.c b/src/audio_out/audio_alsa_out.c
index 8a462e4..11130a8 100644
--- a/src/audio_out/audio_alsa_out.c
+++ b/src/audio_out/audio_alsa_out.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2012 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/audio_out/audio_oss_out.c b/src/audio_out/audio_oss_out.c
index b09137e..3c95594 100644
--- a/src/audio_out/audio_oss_out.c
+++ b/src/audio_out/audio_oss_out.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2012 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/combined/ffmpeg/ff_audio_decoder.c b/src/combined/ffmpeg/ff_audio_decoder.c
index d5f62f7..a066141 100644
--- a/src/combined/ffmpeg/ff_audio_decoder.c
+++ b/src/combined/ffmpeg/ff_audio_decoder.c
@@ -275,85 +275,106 @@ static void ff_handle_header_buffer(ff_audio_decoder_t *this, buf_element_t *buf
       }
     }
   } else {
-    short *ptr;
+    switch (codec_type) {
 
-    switch(codec_type) {
-    case BUF_AUDIO_14_4:
-      this->ff_sample_rate = 8000;
-      this->ff_channels    = 1;
+      case BUF_AUDIO_14_4:
+        this->ff_sample_rate = 8000;
+        this->ff_channels    = 1;
 
-      this->context->block_align = 240;
-      break;
-    case BUF_AUDIO_28_8:
-      this->ff_sample_rate = _X_BE_16(&this->buf[0x30]);
-      this->ff_channels    = this->buf[0x37];
-      /* this->ff_bits = buf->content[0x35] */
+        this->context->block_align = 240;
+        break;
 
-      this->context->block_align = _X_BE_32(&this->buf[0x18]);
+      case BUF_AUDIO_28_8:
+        {
+          uint16_t *ptr;
 
-      this->context->extradata_size = 5*sizeof(short);
-      this->context->extradata      = malloc(this->context->extradata_size);
+          this->ff_sample_rate = _X_BE_16 (&this->buf[0x30]);
+          this->ff_channels    = this->buf[0x37];
+          /* this->ff_bits = buf->content[0x35] */
 
-      ptr = (short *) this->context->extradata;
+          this->context->block_align = _X_BE_32 (&this->buf[0x18]);
 
-      ptr[0] = _X_BE_16(&this->buf[0x2C]); /* subpacket size */
-      ptr[1] = _X_BE_16(&this->buf[0x28]); /* subpacket height */
-      ptr[2] = _X_BE_16(&this->buf[0x16]); /* subpacket flavour */
-      ptr[3] = _X_BE_32(&this->buf[0x18]); /* coded frame size */
-      ptr[4] = 0;                          /* codec's data length  */
+          this->context->extradata_size = 5 * sizeof (uint16_t);
+          this->context->extradata      = malloc (this->context->extradata_size);
 
-      xprintf(this->stream->xine, XINE_VERBOSITY_LOG,
-              "ffmpeg_audio_dec: 28_8 audio channels %d bits %d sample rate %d block align %d\n",
-              this->ff_channels, this->ff_bits, this->ff_sample_rate,
-              this->context->block_align);
-      break;
-    case BUF_AUDIO_COOK:
-      {
-        int version;
-        int data_len;
-        int extradata;
-
-        version = _X_BE_16 (this->buf+4);
-        if (version == 4) {
-          this->ff_sample_rate = _X_BE_16 (this->buf+48);
-          this->ff_bits = _X_BE_16 (this->buf+52);
-          this->ff_channels = _X_BE_16 (this->buf+54);
-          data_len = _X_BE_32 (this->buf+67);
-          extradata = 71;
-        } else {
-          this->ff_sample_rate = _X_BE_16 (this->buf+54);
-          this->ff_bits = _X_BE_16 (this->buf+58);
-          this->ff_channels = _X_BE_16 (this->buf+60);
-          data_len = _X_BE_32 (this->buf+74);
-          extradata = 78;
+          ptr = (uint16_t *)this->context->extradata;
+
+          ptr[0] = _X_BE_16 (&this->buf[0x2C]); /* subpacket size */
+          ptr[1] = _X_BE_16 (&this->buf[0x28]); /* subpacket height */
+          ptr[2] = _X_BE_16 (&this->buf[0x16]); /* subpacket flavour */
+          ptr[3] = _X_BE_32 (&this->buf[0x18]); /* coded frame size */
+          ptr[4] = 0;                           /* codec's data length */
+
+          xprintf (this->stream->xine, XINE_VERBOSITY_DEBUG,
+            "ffmpeg_audio_dec: 28_8 audio channels %d bits %d sample rate %d block align %d\n",
+            this->ff_channels, this->ff_bits, this->ff_sample_rate, this->context->block_align);
+          break;
         }
-        this->context->block_align = _X_BE_16 (this->buf+44);
-
-        xprintf(this->stream->xine, XINE_VERBOSITY_LOG,
-                "ffmpeg_audio_dec: cook audio channels %d bits %d sample rate %d block align %d\n",
-                this->ff_channels, this->ff_bits, this->ff_sample_rate,
-                this->context->block_align);
-
-        if (extradata + data_len > this->size)
-          break; /* abort early - extradata length is bad */
-        if (extradata > INT_MAX - data_len)
-          break;/*integer overflow*/
-
-        this->context->extradata_size = data_len;
-        this->context->extradata      = malloc(this->context->extradata_size +
-                                               FF_INPUT_BUFFER_PADDING_SIZE);
-        xine_fast_memcpy (this->context->extradata, this->buf + extradata,
-                          this->context->extradata_size);
-        break;
-      }
 
-    case BUF_AUDIO_EAC3:
-      break;
+      case BUF_AUDIO_COOK:
+      case BUF_AUDIO_ATRK:
+        {
+          int version, subpacket_size = 0, coded_frame_size = 0, intl = 0;
+          int data_len;
+          uint8_t *p, *e;
+          p = this->buf;
+          e = p + this->size;
+          if (p + 6 > e) break;
+          version = p[5];
+          if (version == 3) {
+            this->ff_sample_rate = 8000;
+            this->ff_bits = 16;
+            this->ff_channels = 1;
+            data_len = 0;
+          } else if (version == 4) {
+            if (p + 73 > e) break;
+            coded_frame_size = _X_BE_32 (p + 24);
+            subpacket_size = _X_BE_16 (p + 44);
+            this->ff_sample_rate = _X_BE_16 (p + 48);
+            this->ff_bits = _X_BE_16 (p + 52);
+            this->ff_channels = _X_BE_16 (p + 54);
+            if (p[56] != 4) break;
+            intl = 57;
+            if (p[61] != 4) break;
+            data_len = _X_BE_32 (p + 69);
+            p += 73;
+          } else {
+            if (p + 78 > e) break;
+            coded_frame_size = _X_BE_32 (p + 24);
+            subpacket_size = _X_BE_16 (p + 44);
+            this->ff_sample_rate = _X_BE_16 (p + 54);
+            this->ff_bits = _X_BE_16 (p + 58);
+            this->ff_channels = _X_BE_16 (p + 60);
+            intl = 62;
+            data_len = _X_BE_32 (p + 74);
+            p += 78;
+          }
+          this->context->block_align = intl && !memcmp (this->buf + intl, "genr", 4) ?
+            subpacket_size : coded_frame_size;
+          if (p + data_len > e) break;
+          if (p > e - data_len) break;
+          xprintf (this->stream->xine, XINE_VERBOSITY_DEBUG,
+            "ffmpeg_audio_dec: %s audio channels %d bits %d sample rate %d block align %d\n",
+            codec_type == BUF_AUDIO_COOK ? "cook" : "atrac 3",
+            this->ff_channels, this->ff_bits, this->ff_sample_rate,
+            this->context->block_align);
+          if (!data_len) break;
+          e = malloc (data_len + FF_INPUT_BUFFER_PADDING_SIZE);
+          if (!e) break;
+          xine_fast_memcpy (e, p, data_len);
+          memset (e + data_len, 0, FF_INPUT_BUFFER_PADDING_SIZE);
+          this->context->extradata = e;
+          this->context->extradata_size = data_len;
+          break;
+        }
 
-    default:
-      xprintf(this->stream->xine, XINE_VERBOSITY_LOG,
-              "ffmpeg_audio_dec: unknown header with buf type 0x%X\n", codec_type);
-      break;
+      case BUF_AUDIO_EAC3:
+        break;
+
+      default:
+        xprintf (this->stream->xine, XINE_VERBOSITY_LOG,
+          "ffmpeg_audio_dec: unknown header with buf type 0x%X\n", codec_type);
+        break;
     }
   }
 
diff --git a/src/combined/ffmpeg/xine_audio.list b/src/combined/ffmpeg/xine_audio.list
index 2002dd7..ea905c2 100644
--- a/src/combined/ffmpeg/xine_audio.list
+++ b/src/combined/ffmpeg/xine_audio.list
@@ -33,6 +33,7 @@ SHORTEN			SHORTEN			Shorten
 ALAC			ALAC			ALAC
 QDESIGN2		QDM2			QDesign
 COOK			COOK			RealAudio Cooker
+ATRK			ATRAC3			ATRAC 3
 TRUESPEECH		TRUESPEECH		TrueSpeech
 TTA			TTA			True Audio Lossless
 SMACKER			SMACKAUDIO		Smacker
diff --git a/src/combined/flac_demuxer.c b/src/combined/flac_demuxer.c
index 2292455..27c4750 100644
--- a/src/combined/flac_demuxer.c
+++ b/src/combined/flac_demuxer.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2011 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/combined/xine_ogg_demuxer.c b/src/combined/xine_ogg_demuxer.c
index 38e970a..b839aa6 100644
--- a/src/combined/xine_ogg_demuxer.c
+++ b/src/combined/xine_ogg_demuxer.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2012 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/combined/xine_speex_decoder.c b/src/combined/xine_speex_decoder.c
index 4998ec3..8bd5c6f 100644
--- a/src/combined/xine_speex_decoder.c
+++ b/src/combined/xine_speex_decoder.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2009 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/combined/xine_theora_decoder.c b/src/combined/xine_theora_decoder.c
index 303c24e..d65c933 100644
--- a/src/combined/xine_theora_decoder.c
+++ b/src/combined/xine_theora_decoder.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2001-2009 the xine project
+ * Copyright (C) 2001-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/combined/xine_vorbis_decoder.c b/src/combined/xine_vorbis_decoder.c
index 9736fdc..bdbeca0 100644
--- a/src/combined/xine_vorbis_decoder.c
+++ b/src/combined/xine_vorbis_decoder.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2009 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/demuxers/demux_aac.c b/src/demuxers/demux_aac.c
index e7b9d69..728fd63 100644
--- a/src/demuxers/demux_aac.c
+++ b/src/demuxers/demux_aac.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2001-2012 the xine project
+ * Copyright (C) 2001-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/demuxers/demux_mod.c b/src/demuxers/demux_mod.c
index 08ca877..9834b4b 100644
--- a/src/demuxers/demux_mod.c
+++ b/src/demuxers/demux_mod.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2010 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/demuxers/demux_nsv.c b/src/demuxers/demux_nsv.c
index ca8f579..5ae7360 100644
--- a/src/demuxers/demux_nsv.c
+++ b/src/demuxers/demux_nsv.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2009 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/demuxers/demux_qt.c b/src/demuxers/demux_qt.c
index db01ad8..2d1d646 100644
--- a/src/demuxers/demux_qt.c
+++ b/src/demuxers/demux_qt.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2001-2012 the xine project
+ * Copyright (C) 2001-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/demuxers/demux_real.c b/src/demuxers/demux_real.c
index 8e95f28..2464f88 100644
--- a/src/demuxers/demux_real.c
+++ b/src/demuxers/demux_real.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2012 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
@@ -122,6 +122,7 @@ typedef struct {
   uint8_t             *frame_buffer;
   uint32_t             frame_num_bytes;
   uint32_t             sub_packet_cnt;
+  uint32_t             audio_time;
 } real_stream_t;
 
 typedef struct {
@@ -158,12 +159,6 @@ typedef struct {
 
   int64_t              last_pts[2];
   int                  send_newpts;
-  int                  buf_flag_seek;
-
-  uint32_t             last_ts;
-  uint32_t             next_ts;
-  int                  last_seq;
-  int                  next_seq;
 
   int                  fragment_size; /* video sub-demux */
   int                  fragment_count;
@@ -976,96 +971,72 @@ static int demux_real_parse_references( demux_real_t *this) {
 #define WRAP_THRESHOLD           220000
 #define PTS_AUDIO                0
 #define PTS_VIDEO                1
+#define PTS_BOTH                 2
 
 static void check_newpts (demux_real_t *this, int64_t pts, int video, int preview) {
   const int64_t diff = pts - this->last_pts[video];
-  lprintf ("check_newpts %"PRId64"\n", pts);
-
-  if (!preview && pts &&
-      (this->send_newpts || (this->last_pts[video] && abs(diff)>WRAP_THRESHOLD) ) ) {
 
-    lprintf ("diff=%"PRId64"\n", diff);
+  if (preview)
+    return;
 
-    if (this->buf_flag_seek) {
-      _x_demux_control_newpts(this->stream, pts, BUF_FLAG_SEEK);
-      this->buf_flag_seek = 0;
-    } else {
-      _x_demux_control_newpts(this->stream, pts, 0);
-    }
-    this->send_newpts = 0;
-    this->last_pts[1-video] = 0;
+  /* Metronom does not strictly follow audio pts. They usually are too coarse
+     for seamless playback. Instead, it takes the latest discontinuity as a
+     starting point. This can lead to terrible lags for our very long audio frames.
+     So let's make sure audio has the last word here. */
+  if (this->send_newpts > video) {
+    _x_demux_control_newpts (this->stream, pts, BUF_FLAG_SEEK);
+    this->send_newpts         = video;
+    this->last_pts[video]     = pts;
+    this->last_pts[1 - video] = 0;
+  } else if (pts && (this->last_pts[video]) && (abs (diff) > WRAP_THRESHOLD)) {
+    _x_demux_control_newpts (this->stream, pts, 0);
+    this->send_newpts         = 0;
+    this->last_pts[1 - video] = 0;
   }
 
-  if (!preview && pts )
+  if (pts)
     this->last_pts[video] = pts;
 }
 
-static uint32_t real_fix_timestamp (demux_real_t *this, uint8_t *hdr, uint32_t ts_in) {
-  int      pict_type;
-  int      seq;
-  uint32_t ts_out;
-
-  switch(this->video_stream->buf_type) {
+static uint32_t real_get_reordered_pts (demux_real_t *this, uint8_t *hdr, uint32_t dts) {
+  int      pict_type; /* I1/I2/P/B-frame */
+  uint32_t t, pts;
+  /* lower 13 bits of pts are stored within the frame */
+  pict_type = hdr[0];
+  t = ((((uint32_t)hdr[1] << 8) | hdr[2]) << 8) | hdr[3];
+  switch (this->video_stream->buf_type) {
     case BUF_VIDEO_RV20:
-      pict_type = (hdr[0] & 0xC0) >> 6;
-      seq       = ((hdr[1] & 0x7F) << 6) + ((hdr[2] & 0xFC) >> 2);
-      break;
+      pict_type >>= 6;
+      t         >>= 10;
+    break;
     case BUF_VIDEO_RV30:
-      pict_type = (hdr[0] & 0x18) >> 3;
-      seq       = ((hdr[1] & 0x0F) << 9) + (hdr[2] << 1) + ((hdr[3] & 0x80) >> 7);
-      break;
+      pict_type >>= 3;
+      t         >>= 7;
+    break;
     case BUF_VIDEO_RV40:
-      pict_type = (hdr[0] & 0x60) >> 5;
-      seq       = ((hdr[1] & 0x07) << 10) + (hdr[2] << 2) + ((hdr[3] & 0xC0) >> 6);
-      break;
+      pict_type >>= 5;
+      t         >>= 6;
+    break;
     default:
       xprintf(this->stream->xine, XINE_VERBOSITY_DEBUG,
               "demux_real: can't fix timestamp for buf type 0x%08x\n",
               this->video_stream->buf_type);
-      return ts_in;
-      break;
+      return (dts);
+    break;
   }
 
-  switch (pict_type) {
-    case 0:
-    case 1:
-      /* I frame */
-      ts_out = this->next_ts;
-
-      this->last_ts = this->next_ts;
-      this->next_ts = ts_in;
-
-      this->last_seq = this->next_seq;
-      this->next_seq = seq;
-      break;
-    case 2:
-      /* P frame */
-      ts_out = this->next_ts;
-
-      this->last_ts  = this->next_ts;
-      if (seq < this->next_seq)
-        this->next_ts += seq + 8192 - this->next_seq;
-      else
-        this->next_ts += seq - this->next_seq;
-
-      this->last_seq = this->next_seq;
-      this->next_seq = seq;
-      break;
-    case 3:
-      /* B frame */
-      if (seq < this->last_seq)
-        ts_out = ((seq + 8192 - this->last_seq) + this->last_ts);
-      else
-        ts_out = ((seq - this->last_seq) + this->last_ts);
-      break;
-    default:
-      xprintf(this->stream->xine, XINE_VERBOSITY_DEBUG,
-              "demux_real: unknown pict_type: %d\n", pict_type);
-      ts_out = 0;
-      break;
+  pict_type &= 3;
+  t &= 0x1fff;
+  pts = (dts & (~0x1fff)) | t;
+  /* snap to dts +/- 4.095 seconds */
+  if (dts + 0x1000 < pts) pts -= 0x2000;
+  else if (dts > pts + 0x1000) pts += 0x2000;
+  if (this->stream->xine->verbosity == XINE_VERBOSITY_DEBUG + 1) {
+    xprintf (this->stream->xine, XINE_VERBOSITY_DEBUG + 1,
+      "demux_real: video pts: %d.%03d:%04d -> %d.%03d (%d)\n",
+      dts / 1000, dts % 1000, t, pts / 1000, pts % 1000, pict_type);
   }
-
-  return ts_out;
+  return (pts);
 }
 
 static int stream_read_char (demux_real_t *this) {
@@ -1121,7 +1092,7 @@ static int demux_real_send_chunk(demux_plugin_t *this_gen) {
   const uint16_t stream   = _X_BE_16(&header[4]);
   const off_t offset __attr_unused = this->input->get_current_pos(this->input);
   uint16_t size     = _X_BE_16(&header[2]) - DATA_PACKET_HEADER_SIZE;
-  const uint32_t timestamp= _X_BE_32(&header[6]);
+  uint32_t timestamp= _X_BE_32(&header[6]);
   int64_t pts      = (int64_t) timestamp * 90;
 
   /* Data packet header with version 1 contains 1 extra byte */
@@ -1330,14 +1301,14 @@ static int demux_real_send_chunk(demux_plugin_t *this_gen) {
         /* if the video stream has b-frames fix the timestamps */
         if((this->video_stream->format >= 0x20200002) &&
            (buf->decoder_flags & BUF_FLAG_FRAME_START))
-          pts = (int64_t) real_fix_timestamp(this, buf->content, timestamp) * 90;
+          pts = (int64_t)real_get_reordered_pts (this, buf->content, timestamp) * 90;
 
         /* this test was moved from ffmpeg video decoder.
          * fixme: is pts only valid on frame start? */
-        if( buf->decoder_flags & BUF_FLAG_FRAME_START )
+        if (buf->decoder_flags & BUF_FLAG_FRAME_START) {
           buf->pts = pts;
-        else
-          buf->pts = 0;
+          check_newpts (this, pts, PTS_VIDEO, 0);
+        } else buf->pts = 0;
         pts = 0;
 
         buf->extra_info->input_normpos = normpos;
@@ -1371,6 +1342,35 @@ static int demux_real_send_chunk(demux_plugin_t *this_gen) {
     else
       this->audio_need_keyframe = 0;
 
+    /* speed up when not debugging */
+    if (this->stream->xine->verbosity == XINE_VERBOSITY_DEBUG + 1) {
+      xprintf (this->stream->xine, XINE_VERBOSITY_DEBUG + 1,
+        "demux_real: audio pts: %d.%03d %s%s\n",
+        timestamp / 1000, timestamp % 1000,
+        keyframe ? "*" : " ",
+        this->audio_stream->sub_packet_cnt ? " " : "s");
+    }
+
+    /* cook audio frames are fairly long (almost 2 seconds). For obfuscation
+       purposes, they are sent as multiple fragments in intentionally wrong order.
+       The first sent fragment has the timestamp for the whole frame.
+
+       Sometimes, the remaining fragments all carry the same time, and appear
+       immediately thereafter. This is easy.
+
+       Sometimes, the remaining fragments carry fake timestamps interpolated across
+       the frame duration. Consequently, they will be muxed between the next few
+       video frames. We get the complete frame ~2 seconds late. This is ugly.
+       Let's be careful not to trap metronom into a big lag. */
+    if (!this->audio_stream->sub_packet_cnt)
+      this->audio_stream->audio_time = timestamp;
+    else
+      timestamp = this->audio_stream->audio_time;
+    /* nasty kludge, maybe this is somewhere in mdpr? */
+    if (this->audio_stream->buf_type == BUF_AUDIO_COOK)
+      timestamp += 120;
+    pts = (int64_t) timestamp * 90;
+
     /* if we have a seekable stream then use the timestamp for the data
      * packet for more accurate seeking - if not then estimate time using
      * average bitrate */
@@ -1549,6 +1549,7 @@ static void demux_real_send_headers(demux_plugin_t *this_gen) {
 
   this->last_pts[0]   = 0;
   this->last_pts[1]   = 0;
+  this->send_newpts   = PTS_BOTH;
 
   this->avg_bitrate   = 1;
 
@@ -1624,7 +1625,6 @@ static int demux_real_seek (demux_plugin_t *this_gen,
       if(this->audio_stream)
         this->audio_stream->sub_packet_cnt = 0;
 
-      this->buf_flag_seek = 1;
       _x_demux_flush_engine(this->stream);
     }
   }
@@ -1636,13 +1636,10 @@ static int demux_real_seek (demux_plugin_t *this_gen,
     this->input->seek_time(this->input, start_time, SEEK_SET);
   }
 
-  this->send_newpts     = 1;
+  this->send_newpts     = PTS_BOTH;
   this->old_seqnum      = -1;
   this->fragment_size   = 0;
 
-  this->next_ts         = 0;
-  this->next_seq        = 0;
-
   this->status          = DEMUX_OK;
 
   return this->status;
diff --git a/src/input/input_bluray.c b/src/input/input_bluray.c
index b1d938a..afbb796 100644
--- a/src/input/input_bluray.c
+++ b/src/input/input_bluray.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2012 the xine project
+ * Copyright (C) 2000-2013 the xine project
  * Copyright (C) 2009-2011 Petri Hintukainen <phintuka@users.sourceforge.net>
  *
  * This file is part of xine, a free video player.
diff --git a/src/input/libreal/asmrp.c b/src/input/libreal/asmrp.c
index df4f377..3dfaf65 100644
--- a/src/input/libreal/asmrp.c
+++ b/src/input/libreal/asmrp.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2002-2009 the xine project
+ * Copyright (C) 2002-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/input/libreal/real.c b/src/input/libreal/real.c
index 73f1ec3..b5b7e18 100644
--- a/src/input/libreal/real.c
+++ b/src/input/libreal/real.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2002-2009 the xine project
+ * Copyright (C) 2002-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/libreal/xine_real_video_decoder.c b/src/libreal/xine_real_video_decoder.c
index 48ff6f4..6648559 100644
--- a/src/libreal/xine_real_video_decoder.c
+++ b/src/libreal/xine_real_video_decoder.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2011 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
@@ -420,7 +420,7 @@ static void realdec_decode_data (video_decoder_t *this_gen, buf_element_t *buf)
                                                   XINE_IMGFMT_YV12,
                                                   VO_BOTH_FIELDS);
 
-        img->pts       = this->pts;
+        img->pts       = (int64_t)transform_out.timestamp * 90;
         img->duration  = this->duration;
         _x_stream_info_set(this->stream, XINE_STREAM_INFO_FRAME_DURATION, this->duration);
         img->bad_frame = 0;
diff --git a/src/post/deinterlace/xine_plugin.c b/src/post/deinterlace/xine_plugin.c
index b6f0bab..de174b3 100644
--- a/src/post/deinterlace/xine_plugin.c
+++ b/src/post/deinterlace/xine_plugin.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2012 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/post/planar/pp.c b/src/post/planar/pp.c
index bdc1bb7..94e6e21 100644
--- a/src/post/planar/pp.c
+++ b/src/post/planar/pp.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2011 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/spu_dec/spudvb_decoder.c b/src/spu_dec/spudvb_decoder.c
index dd42e78..705693b 100644
--- a/src/spu_dec/spudvb_decoder.c
+++ b/src/spu_dec/spudvb_decoder.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2010-2012 the xine project
+ * Copyright (C) 2010-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/spu_dec/sputext_decoder.c b/src/spu_dec/sputext_decoder.c
index 8421d88..f52d31f 100644
--- a/src/spu_dec/sputext_decoder.c
+++ b/src/spu_dec/sputext_decoder.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2012 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/spu_dec/sputext_demuxer.c b/src/spu_dec/sputext_demuxer.c
index 005178c..2b7f506 100644
--- a/src/spu_dec/sputext_demuxer.c
+++ b/src/spu_dec/sputext_demuxer.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2011 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/vdr/input_vdr.c b/src/vdr/input_vdr.c
index cd1e869..fe5cca9 100644
--- a/src/vdr/input_vdr.c
+++ b/src/vdr/input_vdr.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2003-2012 the xine project
+ * Copyright (C) 2003-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/video_dec/gdkpixbuf.c b/src/video_dec/gdkpixbuf.c
index 72d2a16..f50de22 100644
--- a/src/video_dec/gdkpixbuf.c
+++ b/src/video_dec/gdkpixbuf.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2006-2012 the xine project
+ * Copyright (C) 2006-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/video_dec/libvdpau/alterh264_bits_reader.h b/src/video_dec/libvdpau/alterh264_bits_reader.h
index 90f1771..77481f6 100644
--- a/src/video_dec/libvdpau/alterh264_bits_reader.h
+++ b/src/video_dec/libvdpau/alterh264_bits_reader.h
@@ -1,6 +1,6 @@
 /* kate: tab-indent on; indent-width 4; mixedindent off; indent-mode cstyle; remove-trailing-space on; */
 /*
- * Copyright (C) 2008-2012 the xine project
+ * Copyright (C) 2008-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/video_dec/libvdpau/bits_reader.h b/src/video_dec/libvdpau/bits_reader.h
index ae0dfaa..a2401c8 100644
--- a/src/video_dec/libvdpau/bits_reader.h
+++ b/src/video_dec/libvdpau/bits_reader.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2008-2012 the xine project
+ * Copyright (C) 2008-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/xine-engine/alphablend.c b/src/xine-engine/alphablend.c
index 6e7191e..b6e284c 100644
--- a/src/xine-engine/alphablend.c
+++ b/src/xine-engine/alphablend.c
@@ -3,7 +3,7 @@
  * Copyright (C) James Courtier-Dutton James@superbug.demon.co.uk - July 2001
  *
  * Copyright (C) 2000  Thomas Mirlacher
- *               2002-2012 the xine project
+ *               2002-2013 the xine project
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
diff --git a/src/xine-engine/broadcaster.c b/src/xine-engine/broadcaster.c
index af63435..999ef9e 100644
--- a/src/xine-engine/broadcaster.c
+++ b/src/xine-engine/broadcaster.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2011 the xine project
+ * Copyright (C) 2000-2013 the xine project
  * May 2003 - Miguel Freitas
  * This feature was sponsored by 1Control
  *
diff --git a/src/xine-engine/buffer_types.c b/src/xine-engine/buffer_types.c
index 2048859..2cca67e 100644
--- a/src/xine-engine/buffer_types.c
+++ b/src/xine-engine/buffer_types.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2012 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/xine-utils/memcpy.c b/src/xine-utils/memcpy.c
index e00171e..bd318bd 100644
--- a/src/xine-utils/memcpy.c
+++ b/src/xine-utils/memcpy.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2001-2012 the xine project
+ * Copyright (C) 2001-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
diff --git a/src/xine-utils/utils.c b/src/xine-utils/utils.c
index ed00892..5277aeb 100644
--- a/src/xine-utils/utils.c
+++ b/src/xine-utils/utils.c
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2000-2012 the xine project
+ * Copyright (C) 2000-2013 the xine project
  *
  * This file is part of xine, a free video player.
  *
