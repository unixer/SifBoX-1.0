include bootstrap.mk

AUTOGENERATED_MAKEFILES=Makefile     Makefile.include     addons/skin.confluence/media/Makefile     xbmc/Makefile     xbmc/cdrip/Makefile     xbmc/cores/Makefile     xbmc/cores/VideoRenderers/Makefile     xbmc/cores/dvdplayer/Makefile     lib/Makefile     lib/libdvd/Makefile     xbmc/cores/DllLoader/Makefile     xbmc/cores/DllLoader/exports/Makefile     xbmc/cores/dvdplayer/DVDCodecs/Makefile     xbmc/cores/dvdplayer/DVDCodecs/Audio/Makefile     xbmc/cores/dvdplayer/DVDCodecs/Overlay/Makefile     xbmc/cores/dvdplayer/DVDCodecs/Video/Makefile     xbmc/cores/dvdplayer/DVDDemuxers/Makefile     xbmc/cores/dvdplayer/DVDSubtitles/Makefile     xbmc/cores/AudioEngine/Makefile     xbmc/cores/paplayer/Makefile     xbmc/cores/amlplayer/Makefile     xbmc/cores/omxplayer/Makefile     lib/timidity/Makefile     lib/xbadpcm/Makefile     lib/asap/Makefile     lib/nosefart/Makefile     lib/libsidplay2/Makefile     lib/vgmstream/Makefile     lib/snesapu/SNES/SNESAPU/Makefile     lib/stsound/StSoundLibrary/Makefile     xbmc/cores/playercorefactory/Makefile     xbmc/music/karaoke/Makefile     xbmc/osx/Makefile     xbmc/guilib/Makefile     xbmc/interfaces/Makefile     xbmc/network/Makefile     xbmc/network/upnp/Makefile     lib/libRTV/Makefile     lib/libexif/Makefile     lib/libXDAAP/Makefile     lib/cmyth/Makefile     lib/libhdhomerun/Makefile     lib/libsquish/Makefile     lib/cximage-6.0/Makefile     lib/addons/script.module.pil/Makefile     lib/libUPnP/Makefile     xbmc/DllPaths_generated.h     xbmc/DllPaths_generated_android.h     xbmc/freebsd/Makefile     xbmc/linux/Makefile     xbmc/filesystem/Makefile     xbmc/screensavers/rsxs-0.9/xbmc/Makefile     xbmc/visualizations/XBMCProjectM/Makefile     xbmc/visualizations/Goom/Makefile     xbmc/visualizations/OpenGLSpectrum/Makefile     xbmc/visualizations/WaveForm/Makefile     lib/addons/library.xbmc.addon/Makefile     lib/addons/library.xbmc.gui/Makefile     lib/addons/library.xbmc.pvr/Makefile     xbmc/visualizations/EGLHelpers/Makefile     tools/Linux/xbmc.sh     tools/Linux/xbmc-standalone.sh     tools/TexturePacker/Makefile     tools/EventClients/Clients/OSXRemote/Makefile     xbmc/peripherals/bus/Makefile     xbmc/peripherals/devices/Makefile     xbmc/android/activity/Makefile     xbmc/android/loader/Makefile     xbmc/main/Makefile   xbmc/interfaces/python/Makefile   xbmc/interfaces/python/test/Makefile   .dummy

EC_DIRS= \
	tools/EventClients

XBMCTEX_DIRS= \
	tools/TexturePacker

DVDPCODECS_DIRS= \
	lib \
	lib/libdvd

DVDPLAYER_ARCHIVES=xbmc/cores/dvdplayer/DVDPlayer.a \
                   xbmc/cores/dvdplayer/DVDCodecs/DVDCodecs.a \
                   xbmc/cores/dvdplayer/DVDCodecs/Audio/Audio.a \
                   xbmc/cores/dvdplayer/DVDCodecs/Overlay/Overlay.a \
                   xbmc/cores/dvdplayer/DVDCodecs/Video/Video.a \
                   xbmc/cores/dvdplayer/DVDDemuxers/DVDDemuxers.a \
                   xbmc/cores/dvdplayer/DVDInputStreams/DVDInputStreams.a \
                   xbmc/cores/dvdplayer/DVDSubtitles/DVDSubtitles.a

DIRECTORY_ARCHIVES=$(DVDPLAYER_ARCHIVES) \
                   lib/SlingboxLib/SlingboxLib.a \
                   lib/libRTV/librtv.a \
                   lib/libXDAAP/libxdaap.a \
                   lib/libhts/libhts.a \
                   lib/libsquish/libsquish.a \
                   lib/xbmc-dll-symbols/dll-symbols.a \
                   xbmc/addons/addons.a \
                   xbmc/cdrip/cdrip.a \
                   xbmc/cores/AudioEngine/audioengine.a \
                   xbmc/cores/DllLoader/dllloader.a \
                   xbmc/cores/DllLoader/exports/exports.a \
                   xbmc/cores/DllLoader/exports/util/exports_utils.a \
                   xbmc/cores/ExternalPlayer/ExternalPlayer.a \
                   xbmc/cores/VideoRenderers/VideoRenderer.a \
                   xbmc/cores/VideoRenderers/VideoShaders/VideoShaders.a \
                   xbmc/cores/cores.a \
                   xbmc/cores/paplayer/paplayer.a \
                   xbmc/cores/playercorefactory/playercorefactory.a \
                   xbmc/dbwrappers/dbwrappers.a \
                   xbmc/dialogs/dialogs.a \
                   xbmc/epg/epg.a \
                   xbmc/filesystem/MusicDatabaseDirectory/musicdatabasedirectory.a \
                   xbmc/filesystem/VideoDatabaseDirectory/videodatabasedirectory.a \
                   xbmc/filesystem/filesystem.a \
                   xbmc/guilib/guilib.a \
                   xbmc/input/input.a \
                   xbmc/interfaces/info/info.a \
                   xbmc/interfaces/interfaces.a \
                   xbmc/interfaces/json-rpc/json-rpc.a \
                   xbmc/linux/linux.a \
                   xbmc/music/dialogs/musicdialogs.a \
                   xbmc/music/infoscanner/musicscanner.a \
                   xbmc/music/karaoke/karaoke.a \
                   xbmc/music/music.a \
                   xbmc/music/tags/musictags.a \
                   xbmc/music/windows/musicwindows.a \
                   xbmc/network/libscrobbler/scrobbler.a \
                   xbmc/network/websocket/websocket.a \
                   xbmc/network/network.a \
                   xbmc/peripherals/bus/peripheral-bus.a \
                   xbmc/peripherals/devices/peripheral-devices.a \
                   xbmc/peripherals/dialogs/peripheral-dialogs.a \
                   xbmc/peripherals/peripherals.a \
                   xbmc/pictures/pictures.a \
                   xbmc/playlists/playlists.a \
                   xbmc/powermanagement/powermanagement.a \
                   xbmc/programs/programs.a \
                   xbmc/pvr/addons/pvraddons.a \
                   xbmc/pvr/channels/pvrchannels.a \
                   xbmc/pvr/dialogs/pvrdialogs.a \
                   xbmc/pvr/pvr.a \
                   xbmc/pvr/recordings/pvrrecordings.a \
                   xbmc/pvr/timers/pvrtimers.a \
                   xbmc/pvr/windows/pvrwindows.a \
                   xbmc/rendering/rendering.a \
                   xbmc/settings/settings.a \
                   xbmc/storage/storage.a \
                   xbmc/utils/utils.a \
                   xbmc/video/dialogs/videodialogs.a \
                   xbmc/video/video.a \
                   xbmc/video/windows/videowindows.a \
                   xbmc/windowing/windowing.a \
                   xbmc/windows/windows.a \
                   xbmc/xbmc.a \


NWAOBJSXBMC=	xbmc/threads/threads.a \
		xbmc/commons/commons.a


ifeq (1,1)
DIRECTORY_ARCHIVES += xbmc/network/httprequesthandler/httprequesthandlers.a
endif

DIRECTORY_ARCHIVES += xbmc/interfaces/legacy/legacy.a
DIRECTORY_ARCHIVES += xbmc/interfaces/python/python_binding.a

ifeq (0,1)
DIRECTORY_ARCHIVES += xbmc/rendering/gl/rendering_gl.a
endif

ifeq (1,1)
DIRECTORY_ARCHIVES += xbmc/rendering/gles/rendering_gles.a
DIRECTORY_ARCHIVES += xbmc/windowing/egl/windowing_egl.a
DIRECTORY_ARCHIVES += xbmc/visualizations/EGLHelpers/eglhelpers.a
endif

ifeq (1,1)
DIRECTORY_ARCHIVES += lib/libUPnP/libupnp.a \
                      xbmc/network/upnp/upnp.a
endif

ifeq ($(findstring osx,arm),osx)
DIRECTORY_ARCHIVES += xbmc/osx/osx.a
DIRECTORY_ARCHIVES += xbmc/network/osx/network.a
DIRECTORY_ARCHIVES += xbmc/network/linux/network_linux.a
DIRECTORY_ARCHIVES += xbmc/powermanagement/osx/powermanagement.a
DIRECTORY_ARCHIVES += xbmc/storage/osx/storage.a
DIRECTORY_ARCHIVES += xbmc/windowing/osx/windowing_osx.a
else
ifeq (,1)
DIRECTORY_ARCHIVES += xbmc/input/linux/input_linux.a
DIRECTORY_ARCHIVES += xbmc/network/linux/network_linux.a
DIRECTORY_ARCHIVES += xbmc/powermanagement/android/powermanagement_android.a
DIRECTORY_ARCHIVES += xbmc/storage/android/storage_android.a
DIRECTORY_ARCHIVES += xbmc/windowing/X11/windowing_X11.a
else
DIRECTORY_ARCHIVES += xbmc/input/linux/input_linux.a
DIRECTORY_ARCHIVES += xbmc/network/linux/network_linux.a
DIRECTORY_ARCHIVES += xbmc/powermanagement/linux/powermanagement_linux.a
DIRECTORY_ARCHIVES += xbmc/storage/linux/storage_linux.a
DIRECTORY_ARCHIVES += xbmc/windowing/X11/windowing_X11.a
endif
endif

ifeq ($(findstring freebsd,arm),freebsd)
DIRECTORY_ARCHIVES += xbmc/freebsd/freebsd.a
endif

ifeq (1,1)
DIRECTORY_ARCHIVES += lib/UnrarXLib/UnrarXLib.a
endif

BIN_DIRS = $(dir $(DIRECTORY_ARCHIVES)) $(dir $(NWAOBJSXBMC))

ifeq (,1)
DIRECTORY_ARCHIVES += xbmc/android/loader/AndroidDyload.a
DIRECTORY_ARCHIVES += xbmc/windowing/android/windowing_android.a
DIRECTORY_ARCHIVES += xbmc/android/activity/activity.a
DIRECTORY_ARCHIVES += xbmc/android/bionic_supplement/bionic_supplement.a
endif

ifeq (,1)
DIRECTORY_ARCHIVES += xbmc/cores/amlplayer/amlplayer.a
endif

ifeq (,1)
DIRECTORY_ARCHIVES += xbmc/cores/omxplayer/omxplayer.a
endif

PAPCODECS_DIRS= \
	lib/xbadpcm \
	lib/nosefart \
	lib/timidity \
	lib/libsidplay2 \
	lib/stsound/StSoundLibrary \
	lib/snesapu/SNES/SNESAPU \
	lib/vgmstream

ifeq (0,1)
PAPCODECS_DIRS+= \
	lib/asap
endif

LIB_DIRS=\
	lib/cximage-6.0 \
	lib/libexif \
	lib/libhdhomerun \
	lib/cpluff \
	lib/xbmc-dll-symbols

ifeq (1,1)
LIB_DIRS += lib/cmyth
CMYTH=cmyth
endif

SS_DIRS=
ifneq (1,1)
  SS_DIRS+= xbmc/screensavers/rsxs-0.9/xbmc
endif

VIS_DIRS=xbmc/visualizations/OpenGLSpectrum \
         xbmc/visualizations/WaveForm

ifneq (1,1)
  VIS_DIRS+= xbmc/visualizations/XBMCProjectM
endif

ifneq (1,1)
  VIS_DIRS+=xbmc/visualizations/Goom
endif

LIBADDON_DIRS=\
	lib/addons/library.xbmc.addon \
	lib/addons/library.xbmc.pvr \
	lib/addons/library.xbmc.gui \

CONFLUENCE_MEDIA=addons/skin.confluence/media
SKIN_DIRS=$(CONFLUENCE_MEDIA)

ifeq (0,1)
TOUCHED_MEDIA=addons/skin.touched/media
SKIN_DIRS+=$(TOUCHED_MEDIA)
endif

DIRS= $(BIN_DIRS) $(EC_DIRS) $(XBMCTEX_DIRS) $(DVDPCODECS_DIRS) $(PAPCODECS_DIRS) \
	$(LIB_DIRS) $(SS_DIRS) $(VIS_DIRS) $(LIBADDON_DIRS) $(SKIN_DIRS)

LIBS=-lsmbclient -lssh -lXrandr -lavahi-client -lavahi-common -lmicrohttpd -lSDL_image -lrt -ljasper -lresolv -ldl -ltinyxml -lyajl -lmysqlclient -lssl -lcrypto -lz -llzo2 -lpthread -ltiff -ljpeg -lbz2 -lgcrypt -lgpg-error -lGLESv2 -lEGL  -lstdc++ -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib/python2.7 -lpython2.7 -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/lib -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/lib -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -rdynamic -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/lib -lmysqlclient -lz -lcrypt -lm -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lfribidi   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lsqlite3   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lpng15   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lpcre -lpcrecpp   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lpcre   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lcdio -lm   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lsamplerate   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lfreetype   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -ltag   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lasound   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -ldbus-1   -Wl,-rpath,/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lSDL -lpthread   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lasound   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lX11   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lXext   -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -ludev -lrt   -lcap -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib -lavcodec -lavfilter -lavformat -lavutil -lpostproc -lswscale -lswresample   
CFLAGS=-O2 -O2 -march=armv7-a -ffast-math -fPIC  -mfloat-abi=hard -mfpu=neon -mthumb -Wall -pipe -g -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/include  -fPIC -DPIC -D_REENTRANT -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -DNDEBUG=1 -mno-apcs-stack-check -mfpu=neon -mvectorize-with-neon-quad
CXXFLAGS=-O2 -O2 -march=armv7-a -ffast-math -fPIC  -mfloat-abi=hard -mfpu=neon -mthumb -Wall -pipe -g -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/include  -fPIC -DPIC -D_REENTRANT -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -DNDEBUG=1 -mno-apcs-stack-check -mfpu=neon -mvectorize-with-neon-quad
LDFLAGS=-L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/lib -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/lib -L/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib 
INCLUDES=$(sort -I$(abs_top_srcdir)  -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/include -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include/fribidi   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include/libpng15   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include/freetype2 -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include/taglib   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include/alsa   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include/dbus-1.0 -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/lib/dbus-1.0/include   -D_GNU_SOURCE=1 -D_REENTRANT -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include/SDL   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include/alsa   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include/libcec   -I/root/openbricks/build/build.cubieboard.eglibc/toolchain/armv7-openbricks-linux-gnueabihf/sysroot/usr/local/include  )

CLEAN_FILES=xbmc.bin xbmc-xrandr libxbmc.so

DISTCLEAN_FILES=config.h config.log config.status tools/Linux/xbmc.sh \
        tools/Linux/xbmc-standalone.sh autom4te.cache config.h.in~ \
        system/libcpluff-arm.so

ifeq (,1)
FINAL_TARGETS+=libxbmc.so
ifeq (,1)
FINAL_TARGETS+=skins
endif
else
FINAL_TARGETS=xbmc.bin skins xbmc-xrandr
endif
FINAL_TARGETS+=Makefile externals

GTEST_DIR = lib/gtest
GTEST_INCLUDES = -I$(GTEST_DIR)/include
GTEST_LIBS = $(GTEST_DIR)/lib/.libs/libgtest.a

CHECK_DIRS = xbmc/filesystem/test \
             xbmc/utils/test \
             xbmc/threads/test \
             xbmc/interfaces/python/test \
             xbmc/test
CHECK_LIBS = xbmc/filesystem/test/filesystemTest.a \
             xbmc/utils/test/utilsTest.a \
             xbmc/threads/test/threadTest.a \
             xbmc/interfaces/python/test/pythonSwigTest.a \
             xbmc/test/xbmc-test.a
CHECK_PROGRAMS = xbmc-test

CLEAN_FILES += $(CHECK_PROGRAMS)

all : $(FINAL_TARGETS)
	@echo '-----------------------'
	@echo 'XBMC built successfully'
	@echo '-----------------------'

include Makefile.include

.PHONY : dllloader exports visualizations screensavers eventclients papcodecs \
	dvdpcodecs imagelib codecs externals force skins libaddon check \
	testframework testsuite

# hack targets to keep build system up to date
Makefile : config.status $(addsuffix .in, $(AUTOGENERATED_MAKEFILES))
	@echo "Regenerating Makefiles..."
	@./config.status &> /dev/null
	@echo "done"

config.status: configure

# skin textures
ifeq (0,1)
skins: tools/TexturePacker/TexturePacker force
	 $(MAKE) -C $(CONFLUENCE_MEDIA)
ifeq (0,1)
	 $(MAKE) -C $(TOUCHED_MEDIA)
endif
else
skins:
endif

# Setup some dependencies for subdir makes
xbmc/cores/paplayer/paplayer.a: papcodecs
$(DVDPLAYER_ARCHIVES)         : dvdpcodecs

$(NWAOBJSXBMC): force
	@$(MAKE) $(if $(V),,-s) -C $(@D)

$(DIRECTORY_ARCHIVES): force
	@$(MAKE) $(if $(V),,-s) -C $(@D)

lib/cpluff/libcpluff/.libs/libcpluff.a: force
	$(MAKE) -C lib/cpluff/libcpluff
system/libcpluff-arm.so: lib/cpluff/libcpluff/.libs/libcpluff.a exports
ifeq ($(findstring osx,arm), osx)
  ifeq (arm, arm-osx)
	$(CXX) $(LDFLAGS) -all_load -bundle -flat_namespace -undefined dynamic_lookup -read_only_relocs suppress -o $@ $<
  else
	$(CXX) $(LDFLAGS) -all_load -bundle -flat_namespace -undefined dynamic_lookup -lexpat $(BUNDLE1_O) -o $@ $<
  endif
else
	$(CXX) $(LDFLAGS) -shared -o $@ -Wl,--whole-archive $< \
		-Wl,--no-whole-archive  \
		`cat xbmc/cores/DllLoader/exports/wrapper.def` xbmc/cores/DllLoader/exports/wrapper.o -lexpat
endif

exports: xbmc/cores/DllLoader/exports/exports.a xbmc/cores/DllLoader/exports/util/exports_utils.a
	$(MAKE) -C xbmc/cores/DllLoader/exports wrapper.def
dllloader: exports xbmc/cores/DllLoader/dllloader.a

ifeq (1,1)
EGLHELPERS=xbmc/visualizations/EGLHelpers/eglhelpers.a
endif

$(VIS_DIRS): force exports $(EGLHELPERS)
	$(MAKE) -C $@

$(SS_DIRS): force exports
	$(MAKE) -C $@

visualizations: $(VIS_DIRS)

screensavers: $(SS_DIRS)

libaddon: exports
	$(MAKE) -C lib/addons/library.xbmc.addon
	$(MAKE) -C lib/addons/library.xbmc.gui
	$(MAKE) -C lib/addons/library.xbmc.pvr
dvdpcodecs: dllloader
	$(MAKE) -C lib
	$(MAKE) -C lib/libdvd
eventclients:
ifeq ($(findstring osx,arm), osx)
ifneq ($(findstring arm,arm), arm)
	$(MAKE) -C tools/EventClients/Clients/OSXRemote
endif
else
	$(MAKE) -C tools/EventClients
endif
libexif: dllloader
	$(MAKE) -C lib/libexif
cmyth: dllloader
	$(MAKE) -C lib/cmyth
libhdhomerun: dllloader
	$(MAKE) -C lib/libhdhomerun
papcodecs: dllloader dvdpcodecs
	test -d system/players/paplayer || mkdir system/players/paplayer
	$(MAKE) -C lib/xbadpcm
	$(MAKE) -C lib/vgmstream
	$(MAKE) -C lib/timidity
	$(MAKE) -C lib/nosefart
ifneq ($(findstring arm-osx,arm), arm-osx)
	$(MAKE) -C lib/libsidplay2
endif
ifeq (0,1)
  ifneq ($(findstring osx,arm), osx)
	$(MAKE) -C lib/asap asap-xbmc
  endif
endif
	$(MAKE) -C lib/stsound/StSoundLibrary
ifeq ($(or $(findstring powerpc,arm),$(findstring x86_64-linux,arm),$(findstring arm, arm),$(findstring freebsd,arm)),)
	$(MAKE) -C lib/snesapu/SNES/SNESAPU
endif
imagelib: dllloader
	$(MAKE) -C lib/cximage-6.0

pvraddons: exports
ifeq (0,1)
	$(MAKE) -C pvr-addons
endif

codecs: papcodecs dvdpcodecs

libs: libhdhomerun imagelib libexif system/libcpluff-arm.so $(CMYTH)

externals: codecs libs visualizations screensavers libaddon pvraddons

xcode_depends: \
	codecs libs visualizations screensavers eventclients skins libaddon \
	lib/libsquish/libsquish.a \
	lib/libRTV/librtv.a \
	lib/libXDAAP/libxdaap.a \
	lib/SlingboxLib/SlingboxLib.a

OBJSXBMC =$(DIRECTORY_ARCHIVES)

DYNOBJSXBMC= \
	xbmc/linux/linux.a \
	xbmc/network/network.a \
	xbmc/video/windows/videowindows.a \
	xbmc/utils/utils.a \
	xbmc/cores/DllLoader/exports/util/exports_utils.a \
	xbmc/cores/DllLoader/exports/exports.a \
	xbmc/settings/settings.a \
	xbmc/video/video.a \
	xbmc/pvr/addons/pvraddons.a \
	xbmc/pvr/windows/pvrwindows.a \
	xbmc/guilib/guilib.a # must be dynamic to avoid linker errors

ifeq ($(findstring freebsd,arm),freebsd)
DYNOBJSXBMC+= xbmc/freebsd/freebsd.a
endif

OBJSXBMC:=$(filter-out $(DYNOBJSXBMC), $(OBJSXBMC))

libxbmc.so: $(OBJSXBMC) $(DYNOBJSXBMC) $(NWAOBJSXBMC)
ifeq ($(findstring osx,arm), osx)
	$(SILENT_LD) $(CXX) $(LDFLAGS) -bundle -o $@ -Wl,-all_load,-ObjC $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(OBJSXBMC) $(LIBS)
else
	$(SILENT_LD) $(CXX) $(CXXFLAGS) $(LDFLAGS) -shared -o $@ -Wl,--whole-archive $(DYNOBJSXBMC) $(OBJSXBMC) -Wl,--no-whole-archive -Wl,--no-undefined $(NWAOBJSXBMC) $(LIBS)
endif

xbmc.bin: xbmc/main/main.a $(OBJSXBMC) $(DYNOBJSXBMC) $(NWAOBJSXBMC)

ifeq ($(findstring osx,arm), osx)
	$(SILENT_LD) $(CXX) $(LDFLAGS) -o xbmc.bin -Wl,-ObjC $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(OBJSXBMC) xbmc/main/main.a $(LIBS) -rdynamic
else
	$(SILENT_LD) $(CXX) $(CXXFLAGS) $(LDFLAGS) -o xbmc.bin -Wl,--whole-archive $(DYNOBJSXBMC) $(OBJSXBMC) xbmc/main/main.a -Wl,--no-whole-archive $(NWAOBJSXBMC) $(LIBS) -rdynamic
endif

xbmc/main/main.a: force
	$(MAKE) -C xbmc/main

xbmc-xrandr: xbmc-xrandr.c
ifneq (1,1)
	# xbmc-xrandr.c gets picked up by the default make rules
	@echo "excluding xbmc-xrandr"
else
	$(SILENT_LD) $(CC) $(CFLAGS) $(LDFLAGS) -o xbmc-xrandr xbmc-xrandr.c -lXrandr -lX11 -lm
endif

tools/TexturePacker/TexturePacker: lib/libsquish/libsquish.a xbmc/guilib/XBTF.h
	$(MAKE) -C tools/TexturePacker/


install-bin: xbmc.bin # developement convenience target
	sudo install -d $(DESTDIR)$(libdir)
	sudo install xbmc.bin $(DESTDIR)$(libdir)/xbmc

ifeq ($(findstring osx,arm), osx)
	# TODO: add osx install
else
install: install-binaries install-arch install-datas

apk: install
	make -C tools/android/packaging

install-binaries: install-scripts
	@echo "Copying XBMC binary to $(DESTDIR)$(libdir)/xbmc/"
	@install -d $(DESTDIR)$(libdir)/xbmc
ifeq (1,1)
	@install xbmc-xrandr $(DESTDIR)$(libdir)/xbmc/xbmc-xrandr
endif
ifeq (,1)
	@install libxbmc.so $(DESTDIR)$(libdir)/xbmc/libxbmc.so
else
	@install xbmc.bin $(DESTDIR)$(libdir)/xbmc/xbmc.bin
	@echo "You can run XBMC with the command 'xbmc'"
endif
endif

install-arch:
	@# Arch dependent files
ifeq (0,1)
	$(MAKE) -C pvr-addons install
endif
ifeq ($(findstring freebsd,arm), freebsd)
	@find -E system addons -type f -not -iregex ".*svn.*" \
		-iregex ".*arm.*|.*\.vis|.*\.xbs" \
		-exec sh -c "install -d \"$(DESTDIR)$(libdir)/xbmc/\`dirname '{}'\`\"" \; \
		-and \
		-exec install "{}" $(DESTDIR)$(libdir)/xbmc/"{}" \; \
		-exec printf " -- %-75.75s\r" "{}" \;
else
ifeq ($(findstring Darwin,$(shell uname -s)),Darwin)
	@find -E system addons -type f -not -iregex ".*svn.*" \
		-iregex ".*arm.*|.*\.vis|.*\.xbs" \
		-exec sh -c "install -d \"$(DESTDIR)$(libdir)/xbmc/\`dirname '{}'\`\"" \; \
		-and \
		-exec install "{}" $(DESTDIR)$(libdir)/xbmc/"{}" \; \
		-exec printf " -- %-75.75s\r" "{}" \;
else
	@find system addons -regextype posix-extended -type f -not -iregex ".*svn.*" -iregex ".*\.so|.*\.vis|.*\.xbs|.*\.pvr" -exec install -D "{}" $(DESTDIR)$(libdir)/xbmc/"{}" \; -printf " -- %-75.75f\r"
endif
endif

install-scripts:
	@install -d $(DESTDIR)$(bindir)
	@install tools/Linux/xbmc.sh $(DESTDIR)$(bindir)/xbmc
	@install tools/Linux/xbmc-standalone.sh $(DESTDIR)$(bindir)/xbmc-standalone
	@install -d $(DESTDIR)$(datarootdir)/xbmc
	@install -m 0644 tools/Linux/FEH.py $(DESTDIR)$(datarootdir)/xbmc/FEH.py
	@install -d $(DESTDIR)$(datarootdir)/xsessions
	@install -m 0644 tools/Linux/xbmc-xsession.desktop $(DESTDIR)$(datarootdir)/xsessions/XBMC.desktop

install-datas: install-scripts
	@echo "Copying support and legal files..."
	@install -d $(DESTDIR)$(docdir)
	@for FILE in `ls LICENSE.GPL *.txt`; do \
		install -m 0644 "$$FILE" "$(DESTDIR)$(docdir)/$$FILE"; done
	@install -m 0644 "docs/README.linux" "$(DESTDIR)$(docdir)/README.linux"
	@echo "Done!"
	@echo "Copying system files to $(DESTDIR)$(datarootdir)/xbmc"
	@install -d $(DESTDIR)$(datarootdir)/xbmc
	@# Arch independent files
ifeq ($(findstring bsd,arm), bsd)
	@find -E addons language media sounds userdata system -type f \
		-not -iregex ".*arm.*|.*\.vis|.*\.xbs|.*svn.*|.*\.so|.*\.dll" \
		-exec sh -c "install -d \"$(DESTDIR)$(datarootdir)/xbmc/\`dirname '{}'\`\"" \; \
		-and \
		-exec install -m 0644 "{}" $(DESTDIR)$(datarootdir)/xbmc/"{}" \; \
		-exec printf " -- %-75.75s\r" "{}" \;
else
ifeq ($(findstring Darwin,$(shell uname -s)),Darwin)
	@find -E addons language media sounds userdata system -type f \
		-not -iregex ".*arm.*|.*\.vis|.*\.xbs|.*svn.*|.*\.so|.*\.dll" \
		-exec sh -c "install -d \"$(DESTDIR)$(datarootdir)/xbmc/\`dirname '{}'\`\"" \; \
		-and \
		-exec install -m 0644 "{}" $(DESTDIR)$(datarootdir)/xbmc/"{}" \; \
		-exec printf " -- %-75.75s\r" "{}" \;
else
	@find addons language media sounds userdata system -regextype posix-extended -type f -not -iregex ".*arm.*|.*\.vis|.*\.xbs|.*svn.*|.*\.so|.*\.dll|.*\.pvr" -exec install -D -m 0644 "{}" $(DESTDIR)$(datarootdir)/xbmc/"{}" \; -printf " -- %-75.75f\r"
endif
endif
	@# Icons and links
	@install -d $(DESTDIR)$(datarootdir)/applications
	@install tools/Linux/xbmc.desktop $(DESTDIR)$(datarootdir)/applications/xbmc.desktop
	@install -d $(DESTDIR)$(datadir)/icons/hicolor/48x48/apps
	@install -m 0644 tools/Linux/xbmc-48x48.png $(DESTDIR)$(datadir)/icons/hicolor/48x48/apps/xbmc.png
	@install -d $(DESTDIR)$(datadir)/icons/hicolor/256x256/apps
	@install -m 0644 media/icon.png $(DESTDIR)$(datadir)/icons/hicolor/256x256/apps/xbmc.png
	@test -z "$(DESTDIR)" && gtk-update-icon-cache -f -q -t $(datadir)/icons/hicolor || :

uninstall:
	@echo "Removing XBMC..."
	@rm -rf $(DESTDIR)$(libdir)/xbmc
	@rm -rf $(DESTDIR)$(datarootdir)/xbmc $(DESTDIR)$(bindir)/xbmc
	@rm -rf $(DESTDIR)$(bindir)/xbmc-standalone
	@rm -rf $(DESTDIR)$(datarootdir)/xsessions/XBMC.desktop
	@rm -rf $(libdir)/libXBMC_*
	@rm -rf $(prefix)/include/xbmc
	@echo "Done!"

clean-xbmc.bin:
	rm -f xbmc.bin
	for d in $(BIN_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-eventclients:
	for d in $(EC_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-xbmctex:
	for d in $(XBMCTEX_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-dvdpcodecs:
	for d in $(DVDPCODECS_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-papcodecs:
	for d in $(PAPCODECS_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-libs:
	for d in $(LIB_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-screensavers:
	for d in $(SS_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-visualisations:
	for d in $(VIS_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-libaddons:
	for d in $(LIBADDON_DIRS); do if test -f $$d/Makefile; then $(MAKE) -C $$d clean; fi; done
clean-pvraddons:
ifeq (0,1)
	if test -f pvr-addons/Makefile; then $(MAKE) -C pvr-addons clean; fi;
endif

clean-codecs: clean-dvdpcodecs clean-papcodecs

clean-externals: clean-codecs clean-eventclients clean-xbmctex clean-libs \
	clean-screensavers clean-visualisations clean-libaddons clean-pvraddons

ifeq (1,0)
check: testsuite
	for check_program in $(CHECK_PROGRAMS); do $(CURDIR)/$$check_program; done

testsuite: $(CHECK_PROGRAMS)

testframework: $(GTEST_LIBS)

$(GTEST_LIBS): $(GTEST_DIR)/Makefile

$(GTEST_DIR)/Makefile: force
	$(MAKE) -C $(GTEST_DIR)

$(CHECK_LIBS): force
	@$(MAKE) $(if $(V),,-s) -C $(@D)

xbmc-test: $(CHECK_LIBS) $(OBJSXBMC) $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(GTEST_LIBS)
ifeq ($(findstring osx,arm), osx)
	$(SILENT_LD) $(CXX) $(LDFLAGS) $(GTEST_INCLUDES) -o $@ -Wl,-all_load,-ObjC $(CHECK_LIBS) $(DYNOBJSXBMC) $(NWAOBJSXBMC) $(OBJSXBMC) $(GTEST_LIBS) $(LIBS) -rdynamic
else
	$(SILENT_LD) $(CXX) $(CXXFLAGS) $(LDFLAGS) $(GTEST_INCLUDES) -o $@ -Wl,--whole-archive $(CHECK_LIBS) $(DYNOBJSXBMC) $(OBJSXBMC) -Wl,--no-whole-archive $(NWAOBJSXBMC) $(GTEST_LIBS) $(LIBS) -rdynamic
endif
else
# Give a message that the framework is not configured, but don't fail.
check testsuite testframework:
	@echo "Google Test Framework not configured, skipping testsuite check."
endif
