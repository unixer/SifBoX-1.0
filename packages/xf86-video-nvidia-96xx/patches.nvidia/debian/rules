#!/usr/bin/make -f
#
# Copyright (C) 2009 Canonical Ltd
# Authors: Alberto Milone
#
# This file is based on the Mandriva nvidia packages, on Ubuntu's
# previous nvidia packaging scripts and on Ubuntu's fglrx scripts.

include /usr/share/cdbs/1/rules/debhelper.mk


VIDEODEP = $(shell cat /usr/share/xserver-xorg/videodrvdep 2>/dev/null)
VIDDRIVER_PROVIDES = xorg-driver-video

DEB_HOST_MULTIARCH ?= $(shell dpkg-architecture -qDEB_HOST_MULTIARCH)
# If the host is i386 set OTHER_ARCH to x86_64 and vice versa
OTHER_ARCH := $(shell (echo "$(DEB_HOST_MULTIARCH)" | grep i386 >/dev/null) && \
		echo "$(DEB_HOST_MULTIARCH)" | sed s/i386/x86_64/ || \
		echo "$(DEB_HOST_MULTIARCH)" | sed s/x86_64/i386/)

# Hack for pbuild
PATH := $(PATH):/usr/sbin

# Package names
PKG_driver           := nvidia-96
PKG_driver_dev       := $(PKG_driver)-dev
PKG_version          := $(shell dpkg-parsechangelog | awk -F' ' '/^Version:/ {print $$2}' | awk -F- '{print $$1}')
PKG_source           := $(shell dpkg-parsechangelog | sed -n 's/^Source: //p')
PKG_module           := $(shell echo "$(PKG_driver)" | sed s/\-/_/g)

# Priority of the alternative
alt_priority         := 9600

# Installer details
dirname_x86          := NVIDIA-Linux-x86-$(PKG_version)-pkg0
dirname_x86_64       := NVIDIA-Linux-x86_64-$(PKG_version)-pkg2
filename_x86         := $(dirname_x86).run
filename_x86_64      := $(dirname_x86_64).run
url                  := ftp://download.nvidia.com/XFree86/Linux-x86/$(PKG_version)/$(filename_x86)

ifeq ($(DEB_BUILD_ARCH),amd64)
filename             := $(filename_x86_64)
dirname              := $(dirname_x86_64)
else
filename             := $(filename_x86)
dirname              := $(dirname_x86)
endif

bindir               := /usr/bin
datadir              := /usr/share
PKG_datadir          := $(datadir)/$(PKG_driver)
libdir               := /usr/lib
libdir32             := /usr/lib32
includedir           := /usr/include
sysconfdir           := /etc
PKG_libdir           := $(libdir)/$(PKG_driver)
PKG_libdir32         := $(libdir32)/$(PKG_driver)
xorg_libdir          := $(libdir)/xorg
xorg_extra_path      := $(libdir)/$(DEB_HOST_MULTIARCH)/xorg
xorg_extra_modules   := $(xorg_extra_path)/extra-modules
xorg_extensionsdir   := $(xorg_libdir)/modules/extensions
PKG_driversdir       := $(libdir)/$(PKG_driver)/xorg
PKG_extensionsdir    := $(PKG_driversdir)
PKG_bindir           := $(PKG_libdir)/bin
PKG_deskdir          := $(PKG_datadir)
PKG_configdir        := $(PKG_libdir)
ld_so_conf_dir       := $(PKG_configdir)
ld_so_conf_file      := ld.so.conf
alt_ld_so_conf_file  := alt_ld.so.conf
ld_so_conf_path      := $(ld_so_conf_dir)/$(ld_so_conf_file)
alt_ld_so_conf_path  := $(ld_so_conf_dir)/$(alt_ld_so_conf_file)

mandir               := /usr/share/man/man1
PKG_bugdir           := /usr/share/bug/$(PKG_driver)
autostartdir         := /etc/xdg/autostart
PKG_autostartdir     := $(PKG_configdir)
autostartfile        := nvidia-autostart.desktop
desktopfile          := ubuntu-nvidia-settings.desktop
PKG_vdpaudir         := $(PKG_libdir)/vdpau
PKG_tlsdir           := $(PKG_libdir)/tls
PKG_vdpaudir32       := $(PKG_libdir32)/vdpau
PKG_tlsdir32         := $(PKG_libdir32)/tls
vdpaudir             := $(libdir)/vdpau
tlsdir               := $(libdir)/tls
vdpaudir32           := $(libdir32)/vdpau
tlsdir32             := $(libdir32)/tls
grub_blacklistdir    := /usr/share/grub-gfxpayload-lists/blacklist

# This is a hack to make sure that
# the blacklist file is available
# early in the boot process when
# /usr is on a separate partition.
# See LP: #538071.
PKG_libconfdir := /lib/$(PKG_driver)

#These "define" bits are needed for the blacklist file
define newline


endef

define blacklist_file
# This file was installed by $(PKG_driver)
# Do not edit this file manually

blacklist nouveau
blacklist lbm-nouveau
blacklist nvidia-current
blacklist nvidia-173
blacklist nvidia-current-updates
blacklist nvidia-173-updates
blacklist nvidia-96-updates
alias nvidia $(PKG_module)
alias nouveau off
alias lbm-nouveau off
endef

# -Xlib32
DEB_DH_SHLIBDEPS_ARGS_$(PKG_driver)="-Xtls -Xconf" -X$(PKG_libdir32)#
DEB_SHLIBDEPS_INCLUDE_$(PKG_driver) := $(CURDIR)/debian/$(PKG_driver)$(PKG_libdir)/:$(libdir)/
DEB_SHLIBDEPS_INCLUDE_$(PKG_driver_dev) := $(CURDIR)/debian/$(PKG_driver_dev)$(PKG_libdir)/:$(libdir)/

# This makes sure that the xserver ABI is bumped to match the current one when the
# packages are built
.PHONY: serverabi
serverabi:
ifeq ($(VIDEODEP),)
	@echo 'error: xserver-xorg-dev >= 1.7.6.901 needs to be installed'
	@exit 1
else
	echo "xviddriver:Depends=$(VIDEODEP)" >> debian/$(PKG_driver).substvars
	# the following is there for compatibility...
	echo "xviddriver:Provides=$(VIDDRIVER_PROVIDES)" >> debian/$(PKG_driver).substvars
endif

.PHONY: regen-from-templates
regen-from-templates:
	#Create important strings
	for i in dkms.conf \
			 $(PKG_driver).README.Debian      \
			 control                           \
			 copyright                         \
			 ubuntu-nvidia-settings.desktop    \
			 nvidia-autostart.desktop          \
			 $(PKG_driver).grub-gfxpayload     \
			 $(PKG_driver).install             \
			 $(PKG_driver_dev).install         \
			 $(PKG_driver).links               \
			 $(PKG_driver).links32             \
			 $(PKG_driver_dev).links           \
			 $(PKG_driver).override            \
			 $(PKG_driver).dirs                \
			 $(PKG_driver).docs                \
			 $(PKG_driver).examples            \
			 $(PKG_driver).postrm              \
			 $(PKG_driver).postinst            \
			 $(PKG_driver).preinst             \
			 $(PKG_driver).prerm               \
			 $(PKG_driver_dev).preinst; do     \
		sed -e "s|#LIBDIR#|$(libdir)|g"         \
			-e "s|#LIBDIR32#|$(libdir32)|g"     \
			-e "s|#BINDIR#|$(bindir)|g"         \
			-e "s|#VERSION#|$(PKG_version)|g"   \
			-e "s|#SYSCONFDIR#|$(sysconfdir)|g" \
			-e "s|#MANDIR#|$(mandir)|g" \
			-e "s|#LDSOCONF#|$(ld_so_conf_path)|g" \
			-e "s|#ALTLDSOCONF#|$(alt_ld_so_conf_path)|g" \
			-e "s|#ALTPRIORITY#|$(alt_priority)|g" \
			-e "s|#AUTOSTARTDIR#|$(autostartdir)|g" \
			-e "s|#AUTOSTARTFILE#|$(autostartfile)|g" \
			-e "s|#DATADIR#|$(datadir)|g" \
			-e "s|#PKGDESKDIR#|$(PKG_deskdir)|g" \
			-e "s|#PKGDATADIR#|$(PKG_datadir)|g" \
			-e "s|#PKGCONFIGDIR#|$(PKG_configdir)|g" \
			-e "s|#PKGBINDIR#|$(PKG_bindir)|g" \
			-e "s|#PKGLIBDIR#|$(PKG_libdir)|g" \
			-e "s|#PKGLIBDIR32#|$(PKG_libdir32)|g" \
			-e "s|#PKGDRIVERSDIR#|$(PKG_driversdir)|g" \
			-e "s|#XORGEXTRA#|$(xorg_extra_modules)|g" \
			-e "s|#XORGEXTRAPATH#|$(xorg_extra_path)|g" \
			-e "s|#NVIDIAEXTENSION#|$(PKG_extensionsdir)|g" \
			-e "s|#XORGEXTENSIONSDIR#|$(xorg_extensionsdir)|g" \
			-e "s|#DRIVERNAME#|$(PKG_driver)|g" \
			-e "s|#DRIVERDEVNAME#|$(PKG_driver_dev)|g" \
			-e "s|#DRIVERSRCNAME#|$(PKG_source)|g" \
			-e "s|#MODULENAME#|$(PKG_module)|g" \
			-e "s|#DIRNAME#|$(dirname)|g" \
			-e "s|#INCLUDEDIR#|$(includedir)|g" \
			-e "s|#URL#|$(url)|g" \
			-e "s|#VDPAUDIR#|$(vdpaudir)|g" \
			-e "s|#VDPAUDIR32#|$(vdpaudir32)|g" \
			-e "s|#TLSDIR#|$(tlsdir)|g" \
			-e "s|#PKGVDPAUDIR#|$(PKG_vdpaudir)|g" \
			-e "s|#PKGVDPAUDIR32#|$(PKG_vdpaudir32)|g" \
			-e "s|#PKGTLSDIR#|$(PKG_tlsdir)|g" \
			-e "s|#PKGLIBCONFDIR#|$(PKG_libconfdir)|g" \
			-e "s|#GRUBBLKLISTDIR#|$(grub_blacklistdir)|g" \
			-e "s|#DEB_HOST_MULTIARCH#|$(DEB_HOST_MULTIARCH)|g" \
			-e "s|#OTHER_ARCH#|$(OTHER_ARCH)|g" \
			debian/$$i.in > debian/$$i;      \
	done
ifeq ($(DEB_BUILD_ARCH),amd64)
	cat $(CURDIR)/debian/$(PKG_driver).links $(CURDIR)/debian/$(PKG_driver).links32 > \
	$(CURDIR)/debian/$(PKG_driver).links_new
	mv -f $(CURDIR)/debian/$(PKG_driver).links_new $(CURDIR)/debian/$(PKG_driver).links
endif
# Pre-config
#makebuilddir/$(PKG_driver):: regen-from-templates

configure/$(PKG_driver)::
	rm -rf $(dirname_x86) $(dirname_x86_64)

	# Make the installers executable and extract them
	chmod 755 $(filename_x86)
	chmod 755 $(filename_x86_64)
	./$(filename_x86) --extract-only
	./$(filename_x86_64) --extract-only

	# Get around Xen checks
	cp $(dirname)/usr/src/nv/nv.c $(dirname)/usr/src/nv/nv1.c
	cp $(dirname)/usr/src/nv/nv-linux.h $(dirname)/usr/src/nv/nv-linux1.h
	sed 's/CONFIG_XEN/CONFIG_ALB/g'  $(dirname)/usr/src/nv/nv1.c > $(dirname)/usr/src/nv/nv.c
	sed 's/CONFIG_XEN/CONFIG_ALB/g'  $(dirname)/usr/src/nv/nv-linux1.h > $(dirname)/usr/src/nv/nv-linux.h
	rm $(dirname)/usr/src/nv/nv1.c
	rm $(dirname)/usr/src/nv/nv-linux1.h

	# kernel module source
	mkdir -p $(CURDIR)/debian/temp/modules/nvidia-kernel/nv
	cp -R $(CURDIR)/$(dirname)/usr/src/nv $(CURDIR)/debian/temp/modules/nvidia-kernel/
	cp $(CURDIR)/debian/temp/modules/nvidia-kernel/nv/Makefile.kbuild \
	   $(CURDIR)/debian/temp/modules/nvidia-kernel/nv/Makefile

	# Rename the png file for nvidia-settings
	mv $(dirname)/usr/share/pixmaps/nvidia-settings.png \
	$(dirname)/usr/share/pixmaps/$(PKG_driver)-settings.png

	# Disable the stack markings of binaries for security reasons.
	# See (LP: #409456)
	find $(dirname) -name *.so* | xargs -n1 execstack -c

ifeq ($(DEB_BUILD_ARCH),amd64)
	# Disable the stack markings of 32bit binaries on amd64
	# See (LP: #409456)
	find $(dirname_x86) -name *.so* | xargs -n1 execstack -c
endif
	# Disable the stack markings of other binaries (only for the current arch)
	#   Note: don't use for loops or pass more than 1 argument to execstack
	#         or it will fail.
	execstack -c $(dirname)$(bindir)/nvidia-xconfig || true

#binary-install/$(PKG_driver_dev)::

binary-install/$(PKG_driver):: serverabi
ifeq ($(DEB_BUILD_ARCH),amd64)
	#32 bit libraries on 64 bit
	dh_installdirs -p$(PKG_driver) "$(PKG_libdir32)"
	dh_installdirs -p$(PKG_driver) "$(PKG_tlsdir32)"

	dh_install -p$(PKG_driver) "$(dirname_x86)$(libdir)/libGL*.so*"  "$(PKG_libdir32)"
	dh_install -p$(PKG_driver) "$(dirname_x86)$(libdir)/libnvidia*.so*"  "$(PKG_libdir32)"

	dh_install -p$(PKG_driver)  "$(dirname_x86)/usr/X11R6/lib/*.so*"  "$(PKG_libdir32)"
	dh_install -p$(PKG_driver)  "$(dirname_x86)$(tlsdir)/lib*"  "$(PKG_tlsdir32)"
endif

	# Generate modaliases for Jockey and nvidia-common
	mkdir -p $(CURDIR)/debian/$(PKG_driver)-modaliases/usr/share/jockey/modaliases/
	sh -e $(CURDIR)/debian/nvidia_supported \
		$(dirname)/usr/src/nv/nv-kernel.o $(PKG_module) $(PKG_driver) \
		> $(CURDIR)/debian/$(PKG_driver).modaliases
	dh_modaliases
	rm $(CURDIR)/debian/$(PKG_driver).modaliases

	# Configuration stuff

	# ld.so.conf
	dh_installdirs -p$(PKG_driver) "$(ld_so_conf_dir)"
	echo "$(PKG_libdir)" >	"$(CURDIR)/debian/$(PKG_driver)$(ld_so_conf_path)"
ifeq ($(DEB_BUILD_ARCH),amd64)
	echo "$(PKG_libdir32)" >>	$(CURDIR)/debian/$(PKG_driver)$(ld_so_conf_path)
endif
	# empty ld.so.conf for the fake multi-arch alternative
	$(shell touch "$(CURDIR)/debian/$(PKG_driver)$(alt_ld_so_conf_path)")

	# Blacklist any other driver that udev may want to load instead of $(PKG_module)
	# and create an alias for the module so that it can be used as nvidia
	printf '$(subst $(newline),\n,${blacklist_file})' > $(CURDIR)/debian/$(PKG_driver)$(PKG_libconfdir)/modprobe.conf

	# XvMCConfig
	dh_installdirs -p$(PKG_driver) "$(PKG_configdir)"
	echo "libXvMCNVIDIA_dynamic.so.1" > $(CURDIR)/debian/$(PKG_driver)/$(PKG_configdir)/XvMCConfig

	dh_install -p$(PKG_driver) $(dirname)$(mandir)/nvidia-xconfig.1.gz "$(mandir)";
	dh_install -p$(PKG_driver) $(dirname)$(mandir)/nvidia-settings.1.gz "$(mandir)";

	# Rename the man pages in order to use alternatives
	for file in $(CURDIR)/debian/$(PKG_driver)$(mandir)/*.gz; do \
		mv $$file $(CURDIR)/debian/$(PKG_driver)$(mandir)/`basename $$file | sed 's/nvidia/alt-$(PKG_driver)/'`; \
	done

	rm -rf debian/temp


clean:: regen-from-templates
#	for file in $(CURDIR)/debian/*.in \
#	; do \
#		if [ `basename $$file` != "control.in" ]; then \
#			rm -f $(CURDIR)/debian/`basename $$file | sed 's/\.in\$$//'`; \
#		fi \
#	done
	rm -fr $(dirname_x86) $(dirname_x86_64)
	rm -fr debian/temp


