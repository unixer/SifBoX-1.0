diff -ruN skin-nopacity/config.c skinnopacity/config.c
--- skin-nopacity/config.c	2013-04-08 20:12:30.338467706 +0200
+++ skinnopacity/config.c	2013-04-08 20:15:17.326465012 +0200
@@ -59,6 +59,7 @@
     fontVolume = 0;
     //DisplayMenu
     menuAdjustLeft = 1;
+    hideScrollbars = 0;
     scalePicture = 1;
     roundedCorners = 0;
     cornerRadius = 12;
@@ -326,6 +327,7 @@
     else if (strcmp(Name, "menuInfoScrollDelay") == 0)     menuInfoScrollDelay = atoi(Value);
     else if (strcmp(Name, "menuInfoScrollSpeed") == 0)     menuInfoScrollSpeed = atoi(Value);
     else if (strcmp(Name, "menuAdjustLeft") == 0)          menuAdjustLeft = atoi(Value);
+    else if (strcmp(Name, "hideScrollbars") == 0)          hideScrollbars = atoi(Value);
     else if (strcmp(Name, "scalePicture") == 0)            scalePicture = atoi(Value);
     else if (strcmp(Name, "roundedCorners") == 0)          roundedCorners = atoi(Value);
     else if (strcmp(Name, "cornerRadius") == 0)            cornerRadius = atoi(Value);
diff -ruN skin-nopacity/config.h skinnopacity/config.h
--- skin-nopacity/config.h	2013-04-08 20:12:30.342467705 +0200
+++ skinnopacity/config.h	2013-04-08 20:20:30.569255247 +0200
@@ -85,6 +85,7 @@
         int fontVolume;
         //DisplayMenu
         int menuAdjustLeft;
+        int hideScrollbars;
         int scalePicture;
         int roundedCorners;
         int cornerRadius;
diff -ruN skin-nopacity/displaymenuview.c skinnopacity/displaymenuview.c
--- skin-nopacity/displaymenuview.c	2013-04-08 20:12:30.342467705 +0200
+++ skinnopacity/displaymenuview.c	2013-04-08 20:15:17.330465012 +0200
@@ -59,6 +59,7 @@
 void cNopacityDisplayMenuView::SetGeometry(void) {
     spaceMenu = 5;
     widthScrollbar = 20;
+    if (config.hideScrollbars) widthScrollbar = 0;
     dateWidth = osdWidth * 0.3;
     headerHeight = osdHeight * config.headerHeight / 100;
     footerHeight = osdHeight * config.footerHeight / 100;
@@ -78,6 +79,7 @@
                                   contentWidthRecordings,
                                   contentWidthSetup);
     menuItemWidthDefault = contentWidthFull - 4 * spaceMenu;
+    if (config.hideScrollbars) menuItemWidthDefault = contentWidthFull - 2 * spaceMenu;
     menuItemWidthMain = contentWidthMain - 4*spaceMenu;
     menuItemWidthSchedule = contentWidthSchedules - 4*spaceMenu;
     menuItemWidthChannel = contentWidthChannels - 4*spaceMenu;
@@ -457,45 +459,51 @@
     
     int borderWidth = 2;
     int radius = 10;
-
+    int drift = 0;
+    if (config.hideScrollbars) drift = 15;
+	
     pixmapContent->Fill(clrTransparent);
 
-    if (config.menuAdjustLeft) {
+    if (config.menuAdjustLeft) {	
         //Background
-        pixmapContent->DrawRectangle(cRect(0, 0, contentWidthFull - radius, contentHeight), Theme.Color(clrMenuBack));
+        pixmapContent->DrawRectangle(cRect(0, 0, contentWidthFull - radius + drift, contentHeight), Theme.Color(clrMenuBack));
         //Upper and lower Corner Square
-        pixmapContent->DrawRectangle(cRect(contentWidthFull - radius, 0, radius, radius), Theme.Color(clrMenuBack));
-        pixmapContent->DrawRectangle(cRect(contentWidthFull - radius, contentHeight - radius, radius, radius), Theme.Color(clrMenuBack));
+        if (config.hideScrollbars) {
+            pixmapContent->DrawRectangle(cRect(contentWidthFull - radius, 0, radius, radius), Theme.Color(clrMenuBack));
+            pixmapContent->DrawRectangle(cRect(contentWidthFull - radius, contentHeight - radius, radius, radius), Theme.Color(clrMenuBack));
+        }
         //Upper line
-        pixmapContent->DrawRectangle(cRect(contentWidthFull, 0, osdWidth - contentWidthMinimum, borderWidth), Theme.Color(clrMenuBorder));
+        pixmapContent->DrawRectangle(cRect(contentWidthFull + drift, 0, osdWidth - contentWidthMinimum - drift, borderWidth), Theme.Color(clrMenuBorder));
         //Lower Line
-        pixmapContent->DrawRectangle(cRect(contentWidthFull, contentHeight - borderWidth, osdWidth - contentWidthMinimum, borderWidth), Theme.Color(clrMenuBorder));
+        pixmapContent->DrawRectangle(cRect(contentWidthFull + drift, contentHeight - borderWidth, osdWidth - contentWidthMinimum - drift, borderWidth), Theme.Color(clrMenuBorder));
         //Vertical line
-        pixmapContent->DrawRectangle(cRect(contentWidthFull-radius, radius, borderWidth, contentHeight - 2*radius), Theme.Color(clrMenuBorder));
+        pixmapContent->DrawRectangle(cRect(contentWidthFull-radius + drift, radius, borderWidth, contentHeight - 2*radius), Theme.Color(clrMenuBorder));
         //Upper Ellipse
-        pixmapContent->DrawEllipse(cRect(contentWidthFull - radius, 0, radius, radius), Theme.Color(clrMenuBorder),2);
-        pixmapContent->DrawEllipse(cRect(contentWidthFull - radius + borderWidth, borderWidth, radius-borderWidth, radius-borderWidth), clrTransparent, 2);
+        pixmapContent->DrawEllipse(cRect(contentWidthFull - radius + drift, 0, radius, radius), Theme.Color(clrMenuBorder),2);
+        pixmapContent->DrawEllipse(cRect(contentWidthFull - radius + borderWidth + drift, borderWidth, radius-borderWidth, radius-borderWidth), clrTransparent, 2);
         //Lower Ellipse
-        pixmapContent->DrawEllipse(cRect(contentWidthFull - radius, contentHeight - radius, radius, radius), Theme.Color(clrMenuBorder),3);
-        pixmapContent->DrawEllipse(cRect(contentWidthFull - radius + borderWidth, contentHeight - radius, radius-borderWidth, radius-borderWidth), clrTransparent, 3);
+        pixmapContent->DrawEllipse(cRect(contentWidthFull - radius + drift, contentHeight - radius, radius, radius), Theme.Color(clrMenuBorder),3);
+        pixmapContent->DrawEllipse(cRect(contentWidthFull - radius + borderWidth + drift, contentHeight - radius, radius-borderWidth, radius-borderWidth), clrTransparent, 3);
     } else {
         //Background
-        pixmapContent->DrawRectangle(cRect(osdWidth - contentWidthMinimum + radius, 0, contentWidthFull - radius, contentHeight), Theme.Color(clrMenuBack));
+        pixmapContent->DrawRectangle(cRect(osdWidth - contentWidthMinimum + radius - drift, 0, contentWidthFull - radius + drift, contentHeight), Theme.Color(clrMenuBack));
         //Upper and lower Corner Square
-        pixmapContent->DrawRectangle(cRect(osdWidth - contentWidthMinimum, 0, radius, radius), Theme.Color(clrMenuBack));
-        pixmapContent->DrawRectangle(cRect(osdWidth - contentWidthMinimum, contentHeight - radius, radius, radius), Theme.Color(clrMenuBack));
+        if (config.hideScrollbars) {
+            pixmapContent->DrawRectangle(cRect(osdWidth - contentWidthMinimum , 0, radius, radius), Theme.Color(clrMenuBack));
+            pixmapContent->DrawRectangle(cRect(osdWidth - contentWidthMinimum, contentHeight - radius, radius, radius), Theme.Color(clrMenuBack));
+        }
         //Upper line
-        pixmapContent->DrawRectangle(cRect(0, 0, osdWidth - contentWidthMinimum, borderWidth), Theme.Color(clrMenuBorder));
+        pixmapContent->DrawRectangle(cRect(0, 0, osdWidth - contentWidthMinimum - drift, borderWidth), Theme.Color(clrMenuBorder));
         //Lower Line
-        pixmapContent->DrawRectangle(cRect(0, contentHeight - borderWidth, osdWidth - contentWidthMinimum, borderWidth), Theme.Color(clrMenuBorder));
+        pixmapContent->DrawRectangle(cRect(0, contentHeight - borderWidth, osdWidth - contentWidthMinimum - drift, borderWidth), Theme.Color(clrMenuBorder));
         //Vertical line
-        pixmapContent->DrawRectangle(cRect(osdWidth - contentWidthMinimum + radius - borderWidth, radius, borderWidth, contentHeight - 2*radius), Theme.Color(clrMenuBorder));
+        pixmapContent->DrawRectangle(cRect(osdWidth - contentWidthMinimum + radius - borderWidth - drift, radius, borderWidth, contentHeight - 2*radius), Theme.Color(clrMenuBorder));
         //Upper Ellipse
-        pixmapContent->DrawEllipse(cRect(osdWidth - contentWidthMinimum, 0, radius, radius), Theme.Color(clrMenuBorder),1);
-        pixmapContent->DrawEllipse(cRect(osdWidth - contentWidthMinimum, borderWidth, radius-borderWidth, radius-borderWidth), clrTransparent, 1);
+        pixmapContent->DrawEllipse(cRect(osdWidth - contentWidthMinimum - drift, 0, radius, radius), Theme.Color(clrMenuBorder),1);
+        pixmapContent->DrawEllipse(cRect(osdWidth - contentWidthMinimum - drift, borderWidth, radius-borderWidth, radius-borderWidth), clrTransparent, 1);
         //Lower Ellipse
-        pixmapContent->DrawEllipse(cRect(osdWidth - contentWidthMinimum, contentHeight - radius, radius, radius), Theme.Color(clrMenuBorder),4);
-        pixmapContent->DrawEllipse(cRect(osdWidth - contentWidthMinimum, contentHeight - radius, radius-borderWidth, radius-borderWidth), clrTransparent, 4);
+        pixmapContent->DrawEllipse(cRect(osdWidth - contentWidthMinimum - drift, contentHeight - radius, radius, radius), Theme.Color(clrMenuBorder),4);
+        pixmapContent->DrawEllipse(cRect(osdWidth - contentWidthMinimum - drift, contentHeight - radius, radius-borderWidth, radius-borderWidth), clrTransparent, 4);
     }
 }
 
@@ -518,15 +526,31 @@
                 // ask output device to scale down
                 int windowX = (config.menuAdjustLeft)?(osdLeft + contentWidth + widthScrollbar + 2 * spaceMenu)
                                                      :(osdLeft + 2 * spaceMenu);
+                if (config.menuAdjustLeft && config.hideScrollbars) windowX += 8;
+                int windowY = osdTop + headerHeight;
+                int zoom = 0;
+                if (config.scalePicture == 4)
+                    zoom = round(((contentHeight * 1.7) - (contentWidthFull - osdLeft - contentWidth - widthScrollbar - 4 * spaceMenu)) / 2); // not *1.77 because of the round corners
+                else if (config.scalePicture == 3 && (menuCat == mcSchedule || menuCat == mcScheduleNow || menuCat == mcScheduleNext || menuCat == mcRecording))
+                    windowY = osdTop;
+                else if (config.scalePicture == 2) {
+                    if (menuCat == mcSchedule || menuCat == mcScheduleNow || menuCat == mcScheduleNext || menuCat == mcRecording)
+                        windowY = osdTop;
+                    else
+                        zoom = round(((contentHeight * 1.7) - (contentWidthFull - osdLeft - contentWidth - widthScrollbar - 4 * spaceMenu)) / 2);
+                }				
+                if (config.menuAdjustLeft) windowX -= zoom;
+                if (windowX < 0) windowX = 0;
                 cRect availableRect(
                     windowX,
-                    osdTop + headerHeight,
-                    contentWidthFull - osdLeft - contentWidth - widthScrollbar - 4 * spaceMenu,
+                    windowY,
+                    (contentWidthFull - osdLeft - contentWidth - widthScrollbar - 4 * spaceMenu) + (2 * zoom),
                     contentHeight);
                 vidWin = cDevice::PrimaryDevice()->CanScaleVideo(availableRect);
             }
         }
     }
+    if (config.hideScrollbars) return;	
     osd->DestroyPixmap(pixmapScrollbar);
     int scrollbarX = (config.menuAdjustLeft)?(contentWidth):(osdWidth - contentWidth - widthScrollbar);
     pixmapScrollbar = osd->CreatePixmap(2, cRect(scrollbarX , headerHeight + spaceMenu, widthScrollbar, contentHeight - 2*spaceMenu));
@@ -748,6 +772,7 @@
 }
 
 void cNopacityDisplayMenuView::DrawScrollbar(double Height, double Offset) {
+    if (config.hideScrollbars) return;
     int totalHeight = pixmapScrollbar->ViewPort().Height() - 6;
     int height = Height * totalHeight;
     int offset = Offset * totalHeight;
diff -ruN skin-nopacity/imageloader.c skinnopacity/imageloader.c
--- skin-nopacity/imageloader.c	2013-04-08 20:12:30.438467703 +0200
+++ skinnopacity/imageloader.c	2013-04-08 20:15:17.334465012 +0200
@@ -33,6 +33,34 @@
     return true;
 }
 
+bool cImageLoader::LoadItemLogo(const char *logo, int width = config.logoWidth, int height = config.logoHeight) {
+    if ((width == 0)||(height==0))
+        return false;
+    std::string logoLower = logo;
+    toLowerCase(logoLower);
+    bool success = false;
+    if (config.logoPathSet) {
+        cString logoPathRes = cString::sprintf("%smenu/", *config.logoPath);
+        success = LoadImage(logoLower.c_str(), logoPathRes, config.logoExtension);
+        if (!success) {		
+            success = LoadImage(logoLower.c_str(), config.logoPath, config.logoExtension);	
+        }
+    }
+    if (!success) {
+        cString logoPathRes = cString::sprintf("%smenu/", *config.logoPathDefault);
+        success = LoadImage(logoLower.c_str(), logoPathRes, config.logoExtension);
+    }
+    if (!success) {
+        success = LoadImage(logoLower.c_str(), config.logoPathDefault, config.logoExtension);
+    }
+    if (!success)
+        return false;
+    if (height != 0 || width != 0) {
+        buffer.sample( Geometry(width, height));
+    }
+    return true;
+}
+
 bool cImageLoader::LoadIcon(const char *cIcon, int size) {
 	if (size==0)
         return false;
diff -ruN skin-nopacity/imageloader.h skinnopacity/imageloader.h
--- skin-nopacity/imageloader.h	2013-04-08 20:12:30.438467703 +0200
+++ skinnopacity/imageloader.h	2013-04-08 20:15:17.334465012 +0200
@@ -15,6 +15,7 @@
     ~cImageLoader();
     cImage GetImage();
     bool LoadLogo(const char *logo, int width, int height);
+    bool LoadItemLogo(const char *logo, int width, int height);
     bool LoadIcon(const char *cIcon, int size);
     bool LoadIcon(const char *cIcon, int width, int height, bool preserveAspect = true);
     bool LoadEPGImage(int eventID);
diff -ruN skin-nopacity/menuitem.c skinnopacity/menuitem.c
--- skin-nopacity/menuitem.c	2013-04-08 20:12:30.438467703 +0200
+++ skinnopacity/menuitem.c	2013-04-08 20:15:17.334465012 +0200
@@ -524,7 +524,7 @@
 void cNopacityScheduleMenuItem::DrawLogo(int logoWidth, int logoHeight) {
     if (Channel && Channel->Name()) {
         cImageLoader imgLoader;
-        if (imgLoader.LoadLogo(Channel->Name(), logoWidth, logoHeight)) {
+        if (imgLoader.LoadItemLogo(Channel->Name(), logoWidth, logoHeight)) {
             pixmapIcon->DrawImage(cPoint(1, 1), imgLoader.GetImage());
         } else {
             cTextWrapper channel;
@@ -643,7 +643,7 @@
         int logoHeight = config.menuItemLogoHeight;
         if (!drawn) {
             cImageLoader imgLoader;
-            if (imgLoader.LoadLogo(Channel->Name(), logoWidth, logoHeight)) {
+            if (imgLoader.LoadItemLogo(Channel->Name(), logoWidth, logoHeight)) {
                 pixmapIcon->DrawImage(cPoint(1, 1), imgLoader.GetImage());
             }
             drawn = true;
@@ -790,7 +790,7 @@
 void cNopacityTimerMenuItem::DrawLogo(int logoWidth, int logoHeight) {
     if (Timer && Timer->Channel() && Timer->Channel()->Name()) {
         cImageLoader imgLoader;
-        if (imgLoader.LoadLogo(Timer->Channel()->Name(), logoWidth, logoHeight)) {
+        if (imgLoader.LoadItemLogo(Timer->Channel()->Name(), logoWidth, logoHeight)) {
             pixmapIcon->DrawImage(cPoint(1, 1), imgLoader.GetImage());
         } else {
             cTextWrapper channel;
diff -ruN skin-nopacity/po/de_DE.po skinnopacity/po/de_DE.po
--- skin-nopacity/po/de_DE.po	2013-04-08 20:12:30.438467703 +0200
+++ skinnopacity/po/de_DE.po	2013-04-08 20:22:12.194458323 +0200
@@ -122,6 +122,9 @@
 msgid "Adjustment of narrow menus"
 msgstr "Ausrichtung der schmalen Menüs"
 
+msgid "Hide Scrollbars"
+msgstr "Verstecke Bildlaufleisten"
+
 msgid "Scale Video size to fit into menu window"
 msgstr "TV-Bildgröße in Menüfenster einpassen"
 
diff -ruN skin-nopacity/setup.c skinnopacity/setup.c
--- skin-nopacity/setup.c	2013-04-08 20:12:30.442467704 +0200
+++ skinnopacity/setup.c	2013-04-08 20:15:17.338465012 +0200
@@ -114,6 +114,7 @@
     SetupStore("volumeBorderBottom", config.volumeBorderBottom);
     SetupStore("fontVolume", config.fontVolume);
     SetupStore("menuAdjustLeft", config.menuAdjustLeft);
+    SetupStore("hideScrollbars", config.hideScrollbars);
     SetupStore("scalePicture", config.scalePicture);
     SetupStore("roundedCorners", config.roundedCorners);
     SetupStore("cornerRadius", config.cornerRadius);
@@ -241,6 +242,11 @@
 cNopacitySetupMenuDisplay::cNopacitySetupMenuDisplay(cNopacityConfig* data)  : cMenuSetupSubMenu(tr("VDR Menu: Common Settings"), data) {
     adjustLeft[0] = tr("right");
     adjustLeft[1] = tr("left");
+    scaleVidWin[0] = trVDR("no");
+    scaleVidWin[1] = trVDR("yes");
+    scaleVidWin[2] = trVDR("auto");
+    scaleVidWin[3] = trVDR("top");
+    scaleVidWin[4] = trVDR("max");
     scrollSpeed[0] = tr("off");
     scrollSpeed[1] = tr("slow");
     scrollSpeed[2] = tr("medium");
@@ -254,7 +260,8 @@
     Add(new cMenuEditIntItem(tr("Number of Default Menu Entries per Page"), &tmpNopacityConfig->numDefaultMenuItems, 10, 40));
     Add(new cMenuEditIntItem(tr("Adjust Font Size - Default Menu Item"), &tmpNopacityConfig->fontMenuitemDefault, -20, 20));
     Add(new cMenuEditStraItem(tr("Adjustment of narrow menus"), &tmpNopacityConfig->menuAdjustLeft, 2, adjustLeft));
-    Add(new cMenuEditBoolItem(tr("Scale Video size to fit into menu window"), &tmpNopacityConfig->scalePicture));
+    Add(new cMenuEditBoolItem(tr("Hide Scrollbars"), &tmpNopacityConfig->hideScrollbars));
+    Add(new cMenuEditStraItem(tr("Scale Video size to fit into menu window"), &tmpNopacityConfig->scalePicture, 5, scaleVidWin));
     Add(new cMenuEditIntItem(tr("Header Height (Percent of OSD Height)"), &tmpNopacityConfig->headerHeight, 5, 30));
     Add(new cMenuEditIntItem(tr("Header Icon Size (Square Header Menu Icons)"), &tmpNopacityConfig->headerIconHeight, 30, 200));
     Add(new cMenuEditIntItem(tr("Footer Height (Percent of OSD Height)"), &tmpNopacityConfig->footerHeight, 5, 30));
diff -ruN skin-nopacity/setup.h skinnopacity/setup.h
--- skin-nopacity/setup.h	2013-04-08 20:12:30.442467704 +0200
+++ skinnopacity/setup.h	2013-04-08 20:15:17.338465012 +0200
@@ -30,6 +30,7 @@
 class cNopacitySetupMenuDisplay : public cMenuSetupSubMenu {
     protected:
         const char *adjustLeft[2];
+        const char *scaleVidWin[5];
         const char *scrollSpeed[4];
         void Set(void);
     public:
diff -ruN skin-nopacity/skinnopacity.c skinnopacity/skinnopacity.c
--- skin-nopacity/skinnopacity.c	2013-04-08 20:12:30.442467704 +0200
+++ skinnopacity/skinnopacity.c	2013-04-08 20:30:24.042814853 +0200
@@ -91,8 +91,10 @@
       default:
         return false;
     }
-    if (path) 
+    if (path) {
         delete path;
+        path = NULL;
+    }
   }
   return true;
 }
