diff -uNr enigma2pc-20130727.orig/lib/dvb/dvb.cpp enigma2pc-20130727/lib/dvb/dvb.cpp
--- enigma2pc-20130727.orig/lib/dvb/dvb.cpp	2013-07-28 16:43:53.000000000 +0800
+++ enigma2pc-20130727/lib/dvb/dvb.cpp	2013-11-02 11:59:15.434614256 +0800
@@ -477,6 +477,32 @@
 #define DEMUX_BUFFER_SIZE (8 * ((188 / 4) * 4096)) /* 1.5MB */
 	ioctl(demuxFd, DMX_SET_BUFFER_SIZE, DEMUX_BUFFER_SIZE);
 
+#if DVB_API_VERSION < 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR < 5
+       /*
+        * HACK: several stb's with older DVB API versions do not handle the
+        * constant starting / stopping of PES filters on their vtuner interface
+        * very well, eventually they will stop feeding any data.
+        * In order to work around this problem, we always start a filter, making sure
+        * 'pidcount' never drops to zero, so the filter is never stopped.
+        *
+        * Note that this isn't allowed for recent DVB API versions, because they
+        * refuse to start filters while the frontend is sleeping (e.g. not tuned).
+        */
+       {
+               struct dmx_pes_filter_params filter;
+               filter.input = DMX_IN_FRONTEND;
+               filter.flags = 0;
+               filter.pid = 0;
+               filter.output = DMX_OUT_TSDEMUX_TAP;
+               filter.pes_type = DMX_PES_OTHER;
+               if (ioctl(demuxFd, DMX_SET_PES_FILTER, &filter) >= 0
+                               && ioctl(demuxFd, DMX_START) >= 0)
+               {
+                       pidcount = 1;
+               }
+       }
+#endif
+
 	while (running)
 	{
 		fd_set rset, xset;
@@ -743,7 +769,7 @@
 			}
 			else if (!strcmp(type, "DVB-C"))
 			{
-#ifdef SYS_DVBC_ANNEX_A
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 				return i->m_frontend->supportsDeliverySystem(SYS_DVBC_ANNEX_A, false) || i->m_frontend->supportsDeliverySystem(SYS_DVBC_ANNEX_C, false);
 #else
 				return i->m_frontend->supportsDeliverySystem(SYS_DVBC_ANNEX_AC, false);
@@ -778,7 +804,7 @@
 			}
 			else if (!strcmp(type, "DVB-C"))
 			{
-#ifdef SYS_DVBC_ANNEX_A
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 				whitelist.push_back(SYS_DVBC_ANNEX_A);
 				whitelist.push_back(SYS_DVBC_ANNEX_C);
 #else
diff -uNr enigma2pc-20130727.orig/lib/dvb/frontend.cpp enigma2pc-20130727/lib/dvb/frontend.cpp
--- enigma2pc-20130727.orig/lib/dvb/frontend.cpp	2013-06-18 00:03:17.000000000 +0800
+++ enigma2pc-20130727/lib/dvb/frontend.cpp	2013-11-02 11:59:22.766613948 +0800
@@ -1,3 +1,4 @@
+#include <linux/dvb/version.h>
 #include <lib/dvb/dvb.h>
 #include <lib/dvb/frontendparms.h>
 #include <lib/base/eerror.h>
@@ -546,14 +547,14 @@
 				case FE_QPSK:
 				{
 					m_delsys[SYS_DVBS] = true;
-#ifdef FE_CAN_2G_MODULATION
+#if DVB_API_VERSION >= 5
 					if (fe_info.caps & FE_CAN_2G_MODULATION) m_delsys[SYS_DVBS2] = true;
 #endif
 					break;
 				}
 				case FE_QAM:
 				{
-#ifdef SYS_DVBC_ANNEX_A
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 					m_delsys[SYS_DVBC_ANNEX_A] = true;
 #else
 					m_delsys[SYS_DVBC_ANNEX_AC] = true;
@@ -563,7 +564,7 @@
 				case FE_OFDM:
 				{
 					m_delsys[SYS_DVBT] = true;
-#ifdef FE_CAN_2G_MODULATION
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 3
 					if (fe_info.caps & FE_CAN_2G_MODULATION) m_delsys[SYS_DVBT2] = true;
 #endif
 					break;
@@ -900,10 +901,14 @@
 	{
 		ret = (snr * 100) >> 8;
 	}
-	else if (!strcmp(m_description, "Vuplus DVB-S NIM(AVL2108) (DVB-S2)")) // VU+Ultimo DVB-S2 NIM
+	else if (!strcmp(m_description, "Vuplus DVB-S NIM(AVL2108)")) // VU+Ultimo DVB-S2 NIM
 	{
 		ret = (int)((((double(snr) / (65536.0 / 100.0)) * 0.1600) + 0.2100) * 100);
 	}
+	else if (!strcmp(m_description, "Vuplus DVB-S NIM(AVL6222)")) // VU+ DVB-S2 Dual NIM
+	{
+		ret = (int)((((double(snr) / (65536.0 / 100.0)) * 0.1244) + 2.5079) * 100);
+	}
 	else if (!strcmp(m_description, "BCM7335 DVB-S2 NIM (internal)")) // VU+DUO DVB-S2 NIM
 	{
 		ret = (int)((((double(snr) / (65536.0 / 100.0)) * 0.1244) + 2.5079) * 100);
@@ -1706,7 +1711,7 @@
 			cmdseq.num++;
 
 			p[cmdseq.num].cmd = DTV_DELIVERY_SYSTEM;
-#ifdef SYS_DVBC_ANNEX_C
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 			switch (parm.system)
 			{
 				default:
@@ -1821,6 +1826,11 @@
 				case eDVBFrontendParametersTerrestrial::TransmissionMode_2k: p[cmdseq.num].u.data = TRANSMISSION_MODE_2K; break;
 				case eDVBFrontendParametersTerrestrial::TransmissionMode_4k: p[cmdseq.num].u.data = TRANSMISSION_MODE_4K; break;
 				case eDVBFrontendParametersTerrestrial::TransmissionMode_8k: p[cmdseq.num].u.data = TRANSMISSION_MODE_8K; break;
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 3
+				case eDVBFrontendParametersTerrestrial::TransmissionMode_1k: p[cmdseq.num].u.data = TRANSMISSION_MODE_1K; break;
+				case eDVBFrontendParametersTerrestrial::TransmissionMode_16k: p[cmdseq.num].u.data = TRANSMISSION_MODE_16K; break;
+				case eDVBFrontendParametersTerrestrial::TransmissionMode_32k: p[cmdseq.num].u.data = TRANSMISSION_MODE_32K; break;
+#endif
 				default:
 				case eDVBFrontendParametersTerrestrial::TransmissionMode_Auto: p[cmdseq.num].u.data = TRANSMISSION_MODE_AUTO; break;
 			}
@@ -1833,6 +1843,11 @@
 				case eDVBFrontendParametersTerrestrial::GuardInterval_1_16: p[cmdseq.num].u.data = GUARD_INTERVAL_1_16; break;
 				case eDVBFrontendParametersTerrestrial::GuardInterval_1_8: p[cmdseq.num].u.data = GUARD_INTERVAL_1_8; break;
 				case eDVBFrontendParametersTerrestrial::GuardInterval_1_4: p[cmdseq.num].u.data = GUARD_INTERVAL_1_4; break;
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 3
+				case eDVBFrontendParametersTerrestrial::GuardInterval_1_128: p[cmdseq.num].u.data = GUARD_INTERVAL_1_128; break;
+				case eDVBFrontendParametersTerrestrial::GuardInterval_19_128: p[cmdseq.num].u.data = GUARD_INTERVAL_19_128; break;
+				case eDVBFrontendParametersTerrestrial::GuardInterval_19_256: p[cmdseq.num].u.data = GUARD_INTERVAL_19_256; break;
+#endif
 				default:
 				case eDVBFrontendParametersTerrestrial::GuardInterval_Auto: p[cmdseq.num].u.data = GUARD_INTERVAL_AUTO; break;
 			}
@@ -2277,7 +2292,7 @@
 		{
 			return 0;
 		}
-#ifdef SYS_DVBC_ANNEX_A
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 		can_handle_dvbc_annex_a = supportsDeliverySystem(SYS_DVBC_ANNEX_A, true);
 		can_handle_dvbc_annex_c = supportsDeliverySystem(SYS_DVBC_ANNEX_C, true);
 #else
diff -uNr enigma2pc-20130727.orig/lib/dvb/frontendparms.cpp enigma2pc-20130727/lib/dvb/frontendparms.cpp
--- enigma2pc-20130727.orig/lib/dvb/frontendparms.cpp	2013-06-18 00:03:17.000000000 +0800
+++ enigma2pc-20130727/lib/dvb/frontendparms.cpp	2013-11-02 11:59:22.766613948 +0800
@@ -1,3 +1,5 @@
+#include <linux/dvb/version.h>
+
 #include <lib/dvb/dvb.h>
 #include <lib/dvb/frontendparms.h>
 #include <lib/base/eerror.h>
@@ -391,7 +393,7 @@
 {
 	if (originalValues) return transponderParameters.system;
 
-#ifdef SYS_DVBC_ANNEX_C
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 	switch (getProperty(DTV_DELIVERY_SYSTEM))
 	{
 	default:
@@ -497,6 +499,11 @@
 	{
 	case TRANSMISSION_MODE_2K: return eDVBFrontendParametersTerrestrial::TransmissionMode_2k;
 	case TRANSMISSION_MODE_8K: return eDVBFrontendParametersTerrestrial::TransmissionMode_8k;
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 5
+	case TRANSMISSION_MODE_1K: return eDVBFrontendParametersTerrestrial::TransmissionMode_1k;
+	case TRANSMISSION_MODE_16K: return eDVBFrontendParametersTerrestrial::TransmissionMode_16k;
+	case TRANSMISSION_MODE_32K: return eDVBFrontendParametersTerrestrial::TransmissionMode_32k;
+#endif
 	default:
 	case TRANSMISSION_MODE_AUTO: return eDVBFrontendParametersTerrestrial::TransmissionMode_Auto;
 	}
@@ -512,6 +519,11 @@
 	case GUARD_INTERVAL_1_16: return eDVBFrontendParametersTerrestrial::GuardInterval_1_16;
 	case GUARD_INTERVAL_1_8: return eDVBFrontendParametersTerrestrial::GuardInterval_1_8;
 	case GUARD_INTERVAL_1_4: return eDVBFrontendParametersTerrestrial::GuardInterval_1_4;
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 5
+	case GUARD_INTERVAL_1_128: return eDVBFrontendParametersTerrestrial::GuardInterval_1_128;
+	case GUARD_INTERVAL_19_128: return eDVBFrontendParametersTerrestrial::GuardInterval_19_128;
+	case GUARD_INTERVAL_19_256: return eDVBFrontendParametersTerrestrial::GuardInterval_19_256;
+#endif
 	default:
 	case GUARD_INTERVAL_AUTO: return eDVBFrontendParametersTerrestrial::GuardInterval_Auto;
 	}
@@ -628,7 +640,7 @@
 		{
 			result = "DVB-S";
 		}
-#ifdef SYS_DVBC_ANNEX_A
+#if DVB_API_VERSION > 5 || DVB_API_VERSION == 5 && DVB_API_VERSION_MINOR >= 6
 		else if (frontend->supportsDeliverySystem(SYS_DVBC_ANNEX_A, true) || frontend->supportsDeliverySystem(SYS_DVBC_ANNEX_C, true))
 #else
 		else if (frontend->supportsDeliverySystem(SYS_DVBC_ANNEX_AC, true))
diff -uNr enigma2pc-20130727.orig/lib/dvb/frontendparms.h enigma2pc-20130727/lib/dvb/frontendparms.h
--- enigma2pc-20130727.orig/lib/dvb/frontendparms.h	2013-06-18 00:03:17.000000000 +0800
+++ enigma2pc-20130727/lib/dvb/frontendparms.h	2013-11-02 11:59:22.766613948 +0800
@@ -25,8 +25,9 @@
 		Inversion_Off, Inversion_On, Inversion_Unknown
 	};
 
+	/* WARNING: do not change the order of these values, they are used to parse lamedb and satellites.xml FEC fields */
 	enum {
-		FEC_Auto, FEC_1_2, FEC_2_3, FEC_3_4, FEC_5_6, FEC_6_7, FEC_7_8, FEC_8_9, FEC_3_5, FEC_4_5, FEC_9_10, FEC_None=15
+		FEC_Auto=0, FEC_1_2=1, FEC_2_3=2, FEC_3_4=3, FEC_5_6=4, FEC_7_8=5, FEC_8_9=6, FEC_3_5=7, FEC_4_5=8, FEC_9_10=9, FEC_6_7=10, FEC_None=15
 	};
 
 	enum {
@@ -61,8 +62,12 @@
 		Inversion_Off, Inversion_On, Inversion_Unknown
 	};
 
+	/* 
+	 * WARNING: do not change the order of these values, they are used to parse lamedb and cables.xml FEC fields.
+	 * The values are the same as those in eDVBFrontendParametersSatellite.
+	 */
 	enum {
-		FEC_Auto, FEC_1_2, FEC_2_3, FEC_3_4, FEC_5_6, FEC_6_7, FEC_7_8, FEC_8_9, FEC_None=15
+		FEC_Auto=0, FEC_1_2=1, FEC_2_3=2, FEC_3_4=3, FEC_5_6=4, FEC_7_8=5, FEC_8_9=6, FEC_6_7=10, FEC_None=15
 	};
 
 	enum {
@@ -87,8 +92,13 @@
 		Bandwidth_8MHz, Bandwidth_7MHz, Bandwidth_6MHz, Bandwidth_Auto, Bandwidth_5MHz, Bandwidth_1_712MHz, Bandwidth_10MHz
 	};
 
+	/* 
+	 * WARNING: do not change the order of these values, they are used to parse lamedb and terrestrial.xml FEC fields.
+	 * The values are NOT the same as those in eDVBFrontendParametersSatellite/eDVBFrontendParametersCable
+	 * (and it's too late to fix this now, we would break backward compatibility)
+	 */
 	enum {
-		FEC_1_2, FEC_2_3, FEC_3_4, FEC_5_6, FEC_6_7, FEC_7_8, FEC_8_9, FEC_Auto
+		FEC_1_2=0, FEC_2_3=1, FEC_3_4=2, FEC_5_6=3, FEC_7_8=4, FEC_Auto=5, FEC_6_7=6, FEC_8_9=7
 	};
 
 	enum {
@@ -96,11 +106,11 @@
 	};
 
 	enum {
-		TransmissionMode_2k, TransmissionMode_8k, TransmissionMode_Auto, TransmissionMode_4k
+		TransmissionMode_2k, TransmissionMode_8k, TransmissionMode_Auto, TransmissionMode_4k, TransmissionMode_1k, TransmissionMode_16k, TransmissionMode_32k
 	};
 
 	enum {
-		GuardInterval_1_32, GuardInterval_1_16, GuardInterval_1_8, GuardInterval_1_4, GuardInterval_Auto
+		GuardInterval_1_32, GuardInterval_1_16, GuardInterval_1_8, GuardInterval_1_4, GuardInterval_Auto, GuardInterval_1_128, GuardInterval_19_128, GuardInterval_19_256
 	};
 
 	enum {
